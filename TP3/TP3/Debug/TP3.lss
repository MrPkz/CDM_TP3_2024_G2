
TP3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000788  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000080c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000171b  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a82  00000000  00000000  00002077  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bb7  00000000  00000000  00002af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c4  00000000  00000000  000036b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c4  00000000  00000000  00003974  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012b3  00000000  00000000  00003f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  000051eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e8 e8       	ldi	r30, 0x88	; 136
  bc:	f7 e0       	ldi	r31, 0x07	; 7
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a0 30       	cpi	r26, 0x00	; 0
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>
  ca:	0e 94 5d 03 	call	0x6ba	; 0x6ba <main>
  ce:	0c 94 c2 03 	jmp	0x784	; 0x784 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <inicializar_sensor>:




void inicializar_sensor(){
	DDRC |= (1 << PINC0);
  d6:	87 b1       	in	r24, 0x07	; 7
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << PINC0);
  dc:	88 b1       	in	r24, 0x08	; 8
  de:	8e 7f       	andi	r24, 0xFE	; 254
  e0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	89 ef       	ldi	r24, 0xF9	; 249
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <inicializar_sensor+0x12>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <inicializar_sensor+0x1c>
  f2:	00 00       	nop
	_delay_ms(20);
	PORTC |= (1 << PINC0);
  f4:	88 b1       	in	r24, 0x08	; 8
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	20 ea       	ldi	r18, 0xA0	; 160
  fc:	2a 95       	dec	r18
  fe:	f1 f7       	brne	.-4      	; 0xfc <inicializar_sensor+0x26>
	_delay_us(30);
	DDRC &= ~(1 << PINC0);
 100:	87 b1       	in	r24, 0x07	; 7
 102:	8e 7f       	andi	r24, 0xFE	; 254
 104:	87 b9       	out	0x07, r24	; 7
 106:	8f e7       	ldi	r24, 0x7F	; 127
 108:	92 e0       	ldi	r25, 0x02	; 2
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <inicializar_sensor+0x34>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <inicializar_sensor+0x3a>
 110:	00 00       	nop
 112:	08 95       	ret

00000114 <leer>:
	_delay_us(160);
}

uint8_t leer(uint8_t* res){
 114:	ef 92       	push	r14
 116:	ff 92       	push	r15
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	8c 01       	movw	r16, r24
	uint8_t i, checksum= 0, aux = 0, posAct = 0, numAct = 0, salidaAct = 0, salidaAnt = 0; 
	DDRC |= (1 << PINC3);
 122:	87 b1       	in	r24, 0x07	; 7
 124:	88 60       	ori	r24, 0x08	; 8
 126:	87 b9       	out	0x07, r24	; 7
	inicializar_sensor();
 128:	0e 94 6b 00 	call	0xd6	; 0xd6 <inicializar_sensor>
	DDRC &= ~(1 << PINC0);
	_delay_us(160);
}

uint8_t leer(uint8_t* res){
	uint8_t i, checksum= 0, aux = 0, posAct = 0, numAct = 0, salidaAct = 0, salidaAnt = 0; 
 12c:	70 e0       	ldi	r23, 0x00	; 0
	DDRC |= (1 << PINC3);
	inicializar_sensor();
	while(salidaAct != 1){
 12e:	02 c0       	rjmp	.+4      	; 0x134 <leer+0x20>
		salidaAct = (PINC & (1 << PINC0));
 130:	76 b1       	in	r23, 0x06	; 6
 132:	71 70       	andi	r23, 0x01	; 1

uint8_t leer(uint8_t* res){
	uint8_t i, checksum= 0, aux = 0, posAct = 0, numAct = 0, salidaAct = 0, salidaAnt = 0; 
	DDRC |= (1 << PINC3);
	inicializar_sensor();
	while(salidaAct != 1){
 134:	71 30       	cpi	r23, 0x01	; 1
 136:	e1 f7       	brne	.-8      	; 0x130 <leer+0x1c>
 138:	87 2f       	mov	r24, r23
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	e0 e0       	ldi	r30, 0x00	; 0
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	35 c0       	rjmp	.+106    	; 0x1ae <leer+0x9a>
 144:	a7 ec       	ldi	r26, 0xC7	; 199
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	11 97       	sbiw	r26, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <leer+0x34>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <leer+0x3a>
 14e:	00 00       	nop
		salidaAct = (PINC & (1 << PINC0));
	}
	salidaAnt = 1;
	for(i = 0; i<32; i++){
		_delay_us(50);
		aux |= ((PINC & (1 << PINC0)))<<(7-posAct);
 150:	96 b1       	in	r25, 0x06	; 6
 152:	90 fb       	bst	r25, 0
 154:	ee 24       	eor	r14, r14
 156:	e0 f8       	bld	r14, 0
 158:	f1 2c       	mov	r15, r1
 15a:	47 e0       	ldi	r20, 0x07	; 7
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	43 1b       	sub	r20, r19
 160:	51 09       	sbc	r21, r1
 162:	d7 01       	movw	r26, r14
 164:	02 c0       	rjmp	.+4      	; 0x16a <leer+0x56>
 166:	aa 0f       	add	r26, r26
 168:	bb 1f       	adc	r27, r27
 16a:	4a 95       	dec	r20
 16c:	e2 f7       	brpl	.-8      	; 0x166 <leer+0x52>
 16e:	ea 2b       	or	r30, r26
		if(++posAct == 8){
 170:	3f 5f       	subi	r19, 0xFF	; 255
 172:	38 30       	cpi	r19, 0x08	; 8
 174:	39 f4       	brne	.+14     	; 0x184 <leer+0x70>
			res[numAct++] = aux;
 176:	d8 01       	movw	r26, r16
 178:	af 0f       	add	r26, r31
 17a:	b1 1d       	adc	r27, r1
 17c:	ec 93       	st	X, r30
 17e:	ff 5f       	subi	r31, 0xFF	; 255
			aux = 0;
			posAct = 0;
 180:	30 e0       	ldi	r19, 0x00	; 0
	for(i = 0; i<32; i++){
		_delay_us(50);
		aux |= ((PINC & (1 << PINC0)))<<(7-posAct);
		if(++posAct == 8){
			res[numAct++] = aux;
			aux = 0;
 182:	e0 e0       	ldi	r30, 0x00	; 0
 184:	27 2f       	mov	r18, r23
 186:	04 c0       	rjmp	.+8      	; 0x190 <leer+0x7c>
			posAct = 0;
		}
		while(!(salidaAct == 1 && salidaAnt == 0)){
			salidaAnt = salidaAct;
			salidaAct = (PINC & (1 << PINC0));
 188:	96 b1       	in	r25, 0x06	; 6
			res[numAct++] = aux;
			aux = 0;
			posAct = 0;
		}
		while(!(salidaAct == 1 && salidaAnt == 0)){
			salidaAnt = salidaAct;
 18a:	28 2f       	mov	r18, r24
			salidaAct = (PINC & (1 << PINC0));
 18c:	89 2f       	mov	r24, r25
 18e:	81 70       	andi	r24, 0x01	; 1
		if(++posAct == 8){
			res[numAct++] = aux;
			aux = 0;
			posAct = 0;
		}
		while(!(salidaAct == 1 && salidaAnt == 0)){
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	d1 f7       	brne	.-12     	; 0x188 <leer+0x74>
 194:	21 11       	cpse	r18, r1
 196:	f8 cf       	rjmp	.-16     	; 0x188 <leer+0x74>
			salidaAnt = salidaAct;
			salidaAct = (PINC & (1 << PINC0));
		}
		PORTC |= (1 << PINC3);
 198:	98 b1       	in	r25, 0x08	; 8
 19a:	98 60       	ori	r25, 0x08	; 8
 19c:	98 b9       	out	0x08, r25	; 8
 19e:	b5 e0       	ldi	r27, 0x05	; 5
 1a0:	ba 95       	dec	r27
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <leer+0x8c>
 1a4:	00 00       	nop
		_delay_us(1);
		PORTC &= ~(1 << PINC3);
 1a6:	98 b1       	in	r25, 0x08	; 8
 1a8:	97 7f       	andi	r25, 0xF7	; 247
 1aa:	98 b9       	out	0x08, r25	; 8
	inicializar_sensor();
	while(salidaAct != 1){
		salidaAct = (PINC & (1 << PINC0));
	}
	salidaAnt = 1;
	for(i = 0; i<32; i++){
 1ac:	6f 5f       	subi	r22, 0xFF	; 255
 1ae:	60 32       	cpi	r22, 0x20	; 32
 1b0:	48 f2       	brcs	.-110    	; 0x144 <leer+0x30>
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	21 c0       	rjmp	.+66     	; 0x1fa <leer+0xe6>
 1b8:	e7 ec       	ldi	r30, 0xC7	; 199
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <leer+0xa8>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <leer+0xae>
 1c2:	00 00       	nop
		PORTC &= ~(1 << PINC3);
		salidaAnt = 1;
	}
	for(i = 0; i < 8; i++){
		_delay_us(50);
		checksum |= ((PINC & (1 << PINC0)))<<(7-i);
 1c4:	96 b1       	in	r25, 0x06	; 6
 1c6:	91 70       	andi	r25, 0x01	; 1
 1c8:	c9 2f       	mov	r28, r25
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	df 2f       	mov	r29, r31
 1ce:	47 e0       	ldi	r20, 0x07	; 7
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	43 1b       	sub	r20, r19
 1d4:	51 09       	sbc	r21, r1
 1d6:	de 01       	movw	r26, r28
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <leer+0xca>
 1da:	aa 0f       	add	r26, r26
 1dc:	bb 1f       	adc	r27, r27
 1de:	4a 95       	dec	r20
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <leer+0xc6>
 1e2:	6a 2b       	or	r22, r26
		while(!(salidaAct == 1 && salidaAnt == 0)){
 1e4:	27 2f       	mov	r18, r23
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <leer+0xdc>
			salidaAnt = salidaAct;
			salidaAct = (PINC & (1 << PINC0));
 1e8:	96 b1       	in	r25, 0x06	; 6
	}
	for(i = 0; i < 8; i++){
		_delay_us(50);
		checksum |= ((PINC & (1 << PINC0)))<<(7-i);
		while(!(salidaAct == 1 && salidaAnt == 0)){
			salidaAnt = salidaAct;
 1ea:	28 2f       	mov	r18, r24
			salidaAct = (PINC & (1 << PINC0));
 1ec:	89 2f       	mov	r24, r25
 1ee:	81 70       	andi	r24, 0x01	; 1
		salidaAnt = 1;
	}
	for(i = 0; i < 8; i++){
		_delay_us(50);
		checksum |= ((PINC & (1 << PINC0)))<<(7-i);
		while(!(salidaAct == 1 && salidaAnt == 0)){
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	d1 f7       	brne	.-12     	; 0x1e8 <leer+0xd4>
 1f4:	21 11       	cpse	r18, r1
 1f6:	f8 cf       	rjmp	.-16     	; 0x1e8 <leer+0xd4>
		PORTC |= (1 << PINC3);
		_delay_us(1);
		PORTC &= ~(1 << PINC3);
		salidaAnt = 1;
	}
	for(i = 0; i < 8; i++){
 1f8:	3f 5f       	subi	r19, 0xFF	; 255
 1fa:	38 30       	cpi	r19, 0x08	; 8
 1fc:	e8 f2       	brcs	.-70     	; 0x1b8 <leer+0xa4>
			salidaAnt = salidaAct;
			salidaAct = (PINC & (1 << PINC0));
		}
		salidaAnt = 1;
	}
	aux = (res[0] + res[1] + res[2] + res[3]);
 1fe:	f8 01       	movw	r30, r16
 200:	30 81       	ld	r19, Z
 202:	21 81       	ldd	r18, Z+1	; 0x01
 204:	92 81       	ldd	r25, Z+2	; 0x02
 206:	83 81       	ldd	r24, Z+3	; 0x03
 208:	23 0f       	add	r18, r19
 20a:	92 0f       	add	r25, r18
 20c:	98 0f       	add	r25, r24
	return (checksum == aux);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	69 13       	cpse	r22, r25
 212:	80 e0       	ldi	r24, 0x00	; 0
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	1f 91       	pop	r17
 21a:	0f 91       	pop	r16
 21c:	ff 90       	pop	r15
 21e:	ef 90       	pop	r14
 220:	08 95       	ret

00000222 <LCDsendChar>:
 222:	65 b1       	in	r22, 0x05	; 5
 224:	98 2f       	mov	r25, r24
 226:	90 74       	andi	r25, 0x40	; 64
 228:	49 2f       	mov	r20, r25
 22a:	50 e0       	ldi	r21, 0x00	; 0
 22c:	55 95       	asr	r21
 22e:	47 95       	ror	r20
 230:	55 95       	asr	r21
 232:	47 95       	ror	r20
 234:	55 95       	asr	r21
 236:	47 95       	ror	r20
 238:	55 95       	asr	r21
 23a:	47 95       	ror	r20
 23c:	98 2f       	mov	r25, r24
 23e:	90 78       	andi	r25, 0x80	; 128
 240:	29 2f       	mov	r18, r25
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	02 2e       	mov	r0, r18
 246:	23 2f       	mov	r18, r19
 248:	00 0c       	add	r0, r0
 24a:	22 1f       	adc	r18, r18
 24c:	33 0b       	sbc	r19, r19
 24e:	00 0c       	add	r0, r0
 250:	22 1f       	adc	r18, r18
 252:	33 1f       	adc	r19, r19
 254:	96 2f       	mov	r25, r22
 256:	99 7f       	andi	r25, 0xF9	; 249
 258:	49 2b       	or	r20, r25
 25a:	24 2b       	or	r18, r20
 25c:	25 b9       	out	0x05, r18	; 5
 25e:	68 b1       	in	r22, 0x08	; 8
 260:	98 2f       	mov	r25, r24
 262:	90 71       	andi	r25, 0x10	; 16
 264:	49 2f       	mov	r20, r25
 266:	50 e0       	ldi	r21, 0x00	; 0
 268:	55 95       	asr	r21
 26a:	47 95       	ror	r20
 26c:	55 95       	asr	r21
 26e:	47 95       	ror	r20
 270:	55 95       	asr	r21
 272:	47 95       	ror	r20
 274:	98 2f       	mov	r25, r24
 276:	90 72       	andi	r25, 0x20	; 32
 278:	29 2f       	mov	r18, r25
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	35 95       	asr	r19
 27e:	27 95       	ror	r18
 280:	35 95       	asr	r19
 282:	27 95       	ror	r18
 284:	35 95       	asr	r19
 286:	27 95       	ror	r18
 288:	96 2f       	mov	r25, r22
 28a:	99 7f       	andi	r25, 0xF9	; 249
 28c:	49 2b       	or	r20, r25
 28e:	24 2b       	or	r18, r20
 290:	28 b9       	out	0x08, r18	; 8
 292:	9b b1       	in	r25, 0x0b	; 11
 294:	92 60       	ori	r25, 0x02	; 2
 296:	9b b9       	out	0x0b, r25	; 11
 298:	9b b1       	in	r25, 0x0b	; 11
 29a:	91 60       	ori	r25, 0x01	; 1
 29c:	9b b9       	out	0x0b, r25	; 11
 29e:	25 ed       	ldi	r18, 0xD5	; 213
 2a0:	2a 95       	dec	r18
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <LCDsendChar+0x7e>
 2a4:	00 00       	nop
 2a6:	9b b1       	in	r25, 0x0b	; 11
 2a8:	9e 7f       	andi	r25, 0xFE	; 254
 2aa:	9b b9       	out	0x0b, r25	; 11
 2ac:	9b b1       	in	r25, 0x0b	; 11
 2ae:	9d 7f       	andi	r25, 0xFD	; 253
 2b0:	9b b9       	out	0x0b, r25	; 11
 2b2:	95 ed       	ldi	r25, 0xD5	; 213
 2b4:	9a 95       	dec	r25
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCDsendChar+0x92>
 2b8:	00 00       	nop
 2ba:	65 b1       	in	r22, 0x05	; 5
 2bc:	20 e1       	ldi	r18, 0x10	; 16
 2be:	82 9f       	mul	r24, r18
 2c0:	c0 01       	movw	r24, r0
 2c2:	11 24       	eor	r1, r1
 2c4:	ac 01       	movw	r20, r24
 2c6:	40 74       	andi	r20, 0x40	; 64
 2c8:	55 27       	eor	r21, r21
 2ca:	55 95       	asr	r21
 2cc:	47 95       	ror	r20
 2ce:	55 95       	asr	r21
 2d0:	47 95       	ror	r20
 2d2:	55 95       	asr	r21
 2d4:	47 95       	ror	r20
 2d6:	55 95       	asr	r21
 2d8:	47 95       	ror	r20
 2da:	9c 01       	movw	r18, r24
 2dc:	20 78       	andi	r18, 0x80	; 128
 2de:	33 27       	eor	r19, r19
 2e0:	02 2e       	mov	r0, r18
 2e2:	23 2f       	mov	r18, r19
 2e4:	00 0c       	add	r0, r0
 2e6:	22 1f       	adc	r18, r18
 2e8:	33 0b       	sbc	r19, r19
 2ea:	00 0c       	add	r0, r0
 2ec:	22 1f       	adc	r18, r18
 2ee:	33 1f       	adc	r19, r19
 2f0:	36 2f       	mov	r19, r22
 2f2:	39 7f       	andi	r19, 0xF9	; 249
 2f4:	43 2b       	or	r20, r19
 2f6:	24 2b       	or	r18, r20
 2f8:	25 b9       	out	0x05, r18	; 5
 2fa:	48 b1       	in	r20, 0x08	; 8
 2fc:	9c 01       	movw	r18, r24
 2fe:	20 71       	andi	r18, 0x10	; 16
 300:	33 27       	eor	r19, r19
 302:	35 95       	asr	r19
 304:	27 95       	ror	r18
 306:	35 95       	asr	r19
 308:	27 95       	ror	r18
 30a:	35 95       	asr	r19
 30c:	27 95       	ror	r18
 30e:	80 72       	andi	r24, 0x20	; 32
 310:	99 27       	eor	r25, r25
 312:	95 95       	asr	r25
 314:	87 95       	ror	r24
 316:	95 95       	asr	r25
 318:	87 95       	ror	r24
 31a:	95 95       	asr	r25
 31c:	87 95       	ror	r24
 31e:	94 2f       	mov	r25, r20
 320:	99 7f       	andi	r25, 0xF9	; 249
 322:	29 2b       	or	r18, r25
 324:	82 2b       	or	r24, r18
 326:	88 b9       	out	0x08, r24	; 8
 328:	8b b1       	in	r24, 0x0b	; 11
 32a:	82 60       	ori	r24, 0x02	; 2
 32c:	8b b9       	out	0x0b, r24	; 11
 32e:	8b b1       	in	r24, 0x0b	; 11
 330:	81 60       	ori	r24, 0x01	; 1
 332:	8b b9       	out	0x0b, r24	; 11
 334:	85 ed       	ldi	r24, 0xD5	; 213
 336:	8a 95       	dec	r24
 338:	f1 f7       	brne	.-4      	; 0x336 <LCDsendChar+0x114>
 33a:	00 00       	nop
 33c:	8b b1       	in	r24, 0x0b	; 11
 33e:	8e 7f       	andi	r24, 0xFE	; 254
 340:	8b b9       	out	0x0b, r24	; 11
 342:	8b b1       	in	r24, 0x0b	; 11
 344:	8d 7f       	andi	r24, 0xFD	; 253
 346:	8b b9       	out	0x0b, r24	; 11
 348:	95 ed       	ldi	r25, 0xD5	; 213
 34a:	9a 95       	dec	r25
 34c:	f1 f7       	brne	.-4      	; 0x34a <LCDsendChar+0x128>
 34e:	00 00       	nop
 350:	08 95       	ret

00000352 <LCDsendCommand>:
 352:	65 b1       	in	r22, 0x05	; 5
 354:	98 2f       	mov	r25, r24
 356:	90 74       	andi	r25, 0x40	; 64
 358:	49 2f       	mov	r20, r25
 35a:	50 e0       	ldi	r21, 0x00	; 0
 35c:	55 95       	asr	r21
 35e:	47 95       	ror	r20
 360:	55 95       	asr	r21
 362:	47 95       	ror	r20
 364:	55 95       	asr	r21
 366:	47 95       	ror	r20
 368:	55 95       	asr	r21
 36a:	47 95       	ror	r20
 36c:	98 2f       	mov	r25, r24
 36e:	90 78       	andi	r25, 0x80	; 128
 370:	29 2f       	mov	r18, r25
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	02 2e       	mov	r0, r18
 376:	23 2f       	mov	r18, r19
 378:	00 0c       	add	r0, r0
 37a:	22 1f       	adc	r18, r18
 37c:	33 0b       	sbc	r19, r19
 37e:	00 0c       	add	r0, r0
 380:	22 1f       	adc	r18, r18
 382:	33 1f       	adc	r19, r19
 384:	96 2f       	mov	r25, r22
 386:	99 7f       	andi	r25, 0xF9	; 249
 388:	49 2b       	or	r20, r25
 38a:	24 2b       	or	r18, r20
 38c:	25 b9       	out	0x05, r18	; 5
 38e:	68 b1       	in	r22, 0x08	; 8
 390:	98 2f       	mov	r25, r24
 392:	90 71       	andi	r25, 0x10	; 16
 394:	49 2f       	mov	r20, r25
 396:	50 e0       	ldi	r21, 0x00	; 0
 398:	55 95       	asr	r21
 39a:	47 95       	ror	r20
 39c:	55 95       	asr	r21
 39e:	47 95       	ror	r20
 3a0:	55 95       	asr	r21
 3a2:	47 95       	ror	r20
 3a4:	98 2f       	mov	r25, r24
 3a6:	90 72       	andi	r25, 0x20	; 32
 3a8:	29 2f       	mov	r18, r25
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	35 95       	asr	r19
 3ae:	27 95       	ror	r18
 3b0:	35 95       	asr	r19
 3b2:	27 95       	ror	r18
 3b4:	35 95       	asr	r19
 3b6:	27 95       	ror	r18
 3b8:	96 2f       	mov	r25, r22
 3ba:	99 7f       	andi	r25, 0xF9	; 249
 3bc:	49 2b       	or	r20, r25
 3be:	24 2b       	or	r18, r20
 3c0:	28 b9       	out	0x08, r18	; 8
 3c2:	9b b1       	in	r25, 0x0b	; 11
 3c4:	91 60       	ori	r25, 0x01	; 1
 3c6:	9b b9       	out	0x0b, r25	; 11
 3c8:	ef e9       	ldi	r30, 0x9F	; 159
 3ca:	ff e0       	ldi	r31, 0x0F	; 15
 3cc:	31 97       	sbiw	r30, 0x01	; 1
 3ce:	f1 f7       	brne	.-4      	; 0x3cc <LCDsendCommand+0x7a>
 3d0:	00 c0       	rjmp	.+0      	; 0x3d2 <LCDsendCommand+0x80>
 3d2:	00 00       	nop
 3d4:	9b b1       	in	r25, 0x0b	; 11
 3d6:	9e 7f       	andi	r25, 0xFE	; 254
 3d8:	9b b9       	out	0x0b, r25	; 11
 3da:	ef e9       	ldi	r30, 0x9F	; 159
 3dc:	ff e0       	ldi	r31, 0x0F	; 15
 3de:	31 97       	sbiw	r30, 0x01	; 1
 3e0:	f1 f7       	brne	.-4      	; 0x3de <LCDsendCommand+0x8c>
 3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <LCDsendCommand+0x92>
 3e4:	00 00       	nop
 3e6:	65 b1       	in	r22, 0x05	; 5
 3e8:	f0 e1       	ldi	r31, 0x10	; 16
 3ea:	8f 9f       	mul	r24, r31
 3ec:	c0 01       	movw	r24, r0
 3ee:	11 24       	eor	r1, r1
 3f0:	ac 01       	movw	r20, r24
 3f2:	40 74       	andi	r20, 0x40	; 64
 3f4:	55 27       	eor	r21, r21
 3f6:	55 95       	asr	r21
 3f8:	47 95       	ror	r20
 3fa:	55 95       	asr	r21
 3fc:	47 95       	ror	r20
 3fe:	55 95       	asr	r21
 400:	47 95       	ror	r20
 402:	55 95       	asr	r21
 404:	47 95       	ror	r20
 406:	9c 01       	movw	r18, r24
 408:	20 78       	andi	r18, 0x80	; 128
 40a:	33 27       	eor	r19, r19
 40c:	02 2e       	mov	r0, r18
 40e:	23 2f       	mov	r18, r19
 410:	00 0c       	add	r0, r0
 412:	22 1f       	adc	r18, r18
 414:	33 0b       	sbc	r19, r19
 416:	00 0c       	add	r0, r0
 418:	22 1f       	adc	r18, r18
 41a:	33 1f       	adc	r19, r19
 41c:	36 2f       	mov	r19, r22
 41e:	39 7f       	andi	r19, 0xF9	; 249
 420:	43 2b       	or	r20, r19
 422:	24 2b       	or	r18, r20
 424:	25 b9       	out	0x05, r18	; 5
 426:	48 b1       	in	r20, 0x08	; 8
 428:	9c 01       	movw	r18, r24
 42a:	20 71       	andi	r18, 0x10	; 16
 42c:	33 27       	eor	r19, r19
 42e:	35 95       	asr	r19
 430:	27 95       	ror	r18
 432:	35 95       	asr	r19
 434:	27 95       	ror	r18
 436:	35 95       	asr	r19
 438:	27 95       	ror	r18
 43a:	80 72       	andi	r24, 0x20	; 32
 43c:	99 27       	eor	r25, r25
 43e:	95 95       	asr	r25
 440:	87 95       	ror	r24
 442:	95 95       	asr	r25
 444:	87 95       	ror	r24
 446:	95 95       	asr	r25
 448:	87 95       	ror	r24
 44a:	94 2f       	mov	r25, r20
 44c:	99 7f       	andi	r25, 0xF9	; 249
 44e:	29 2b       	or	r18, r25
 450:	82 2b       	or	r24, r18
 452:	88 b9       	out	0x08, r24	; 8
 454:	8b b1       	in	r24, 0x0b	; 11
 456:	81 60       	ori	r24, 0x01	; 1
 458:	8b b9       	out	0x0b, r24	; 11
 45a:	8f e9       	ldi	r24, 0x9F	; 159
 45c:	9f e0       	ldi	r25, 0x0F	; 15
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 462:	00 c0       	rjmp	.+0      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 464:	00 00       	nop
 466:	8b b1       	in	r24, 0x0b	; 11
 468:	8e 7f       	andi	r24, 0xFE	; 254
 46a:	8b b9       	out	0x0b, r24	; 11
 46c:	ef e9       	ldi	r30, 0x9F	; 159
 46e:	ff e0       	ldi	r31, 0x0F	; 15
 470:	31 97       	sbiw	r30, 0x01	; 1
 472:	f1 f7       	brne	.-4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 474:	00 c0       	rjmp	.+0      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 476:	00 00       	nop
 478:	08 95       	ret

0000047a <LCDclr>:
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	0e 94 a9 01 	call	0x352	; 0x352 <LCDsendCommand>
 480:	08 95       	ret

00000482 <LCDhome>:
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	0e 94 a9 01 	call	0x352	; 0x352 <LCDsendCommand>
 488:	08 95       	ret

0000048a <LCDGotoXY>:
 48a:	62 30       	cpi	r22, 0x02	; 2
 48c:	31 f0       	breq	.+12     	; 0x49a <LCDGotoXY+0x10>
 48e:	63 30       	cpi	r22, 0x03	; 3
 490:	31 f0       	breq	.+12     	; 0x49e <LCDGotoXY+0x14>
 492:	61 30       	cpi	r22, 0x01	; 1
 494:	29 f4       	brne	.+10     	; 0x4a0 <LCDGotoXY+0x16>
 496:	80 5c       	subi	r24, 0xC0	; 192
 498:	03 c0       	rjmp	.+6      	; 0x4a0 <LCDGotoXY+0x16>
 49a:	8c 5e       	subi	r24, 0xEC	; 236
 49c:	01 c0       	rjmp	.+2      	; 0x4a0 <LCDGotoXY+0x16>
 49e:	8c 5a       	subi	r24, 0xAC	; 172
 4a0:	80 68       	ori	r24, 0x80	; 128
 4a2:	0e 94 a9 01 	call	0x352	; 0x352 <LCDsendCommand>
 4a6:	08 95       	ret

000004a8 <LCDdefinechar>:
 4a8:	ef 92       	push	r14
 4aa:	ff 92       	push	r15
 4ac:	0f 93       	push	r16
 4ae:	1f 93       	push	r17
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	7c 01       	movw	r14, r24
 4b6:	86 2f       	mov	r24, r22
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	80 64       	ori	r24, 0x40	; 64
 4c8:	c0 e0       	ldi	r28, 0x00	; 0
 4ca:	d0 e0       	ldi	r29, 0x00	; 0
 4cc:	0d c0       	rjmp	.+26     	; 0x4e8 <LCDdefinechar+0x40>
 4ce:	f7 01       	movw	r30, r14
 4d0:	ec 0f       	add	r30, r28
 4d2:	fd 1f       	adc	r31, r29
 4d4:	14 91       	lpm	r17, Z
 4d6:	01 e0       	ldi	r16, 0x01	; 1
 4d8:	08 0f       	add	r16, r24
 4da:	0e 94 a9 01 	call	0x352	; 0x352 <LCDsendCommand>
 4de:	81 2f       	mov	r24, r17
 4e0:	0e 94 11 01 	call	0x222	; 0x222 <LCDsendChar>
 4e4:	21 96       	adiw	r28, 0x01	; 1
 4e6:	80 2f       	mov	r24, r16
 4e8:	c8 30       	cpi	r28, 0x08	; 8
 4ea:	d1 05       	cpc	r29, r1
 4ec:	80 f3       	brcs	.-32     	; 0x4ce <LCDdefinechar+0x26>
 4ee:	df 91       	pop	r29
 4f0:	cf 91       	pop	r28
 4f2:	1f 91       	pop	r17
 4f4:	0f 91       	pop	r16
 4f6:	ff 90       	pop	r15
 4f8:	ef 90       	pop	r14
 4fa:	08 95       	ret

000004fc <LCDinit>:
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	8f e5       	ldi	r24, 0x5F	; 95
 502:	9a ee       	ldi	r25, 0xEA	; 234
 504:	01 97       	sbiw	r24, 0x01	; 1
 506:	f1 f7       	brne	.-4      	; 0x504 <LCDinit+0x8>
 508:	00 c0       	rjmp	.+0      	; 0x50a <LCDinit+0xe>
 50a:	00 00       	nop
 50c:	85 b1       	in	r24, 0x05	; 5
 50e:	89 7f       	andi	r24, 0xF9	; 249
 510:	85 b9       	out	0x05, r24	; 5
 512:	88 b1       	in	r24, 0x08	; 8
 514:	89 7f       	andi	r24, 0xF9	; 249
 516:	88 b9       	out	0x08, r24	; 8
 518:	1b b8       	out	0x0b, r1	; 11
 51a:	87 b1       	in	r24, 0x07	; 7
 51c:	86 60       	ori	r24, 0x06	; 6
 51e:	87 b9       	out	0x07, r24	; 7
 520:	84 b1       	in	r24, 0x04	; 4
 522:	86 60       	ori	r24, 0x06	; 6
 524:	84 b9       	out	0x04, r24	; 4
 526:	84 b1       	in	r24, 0x04	; 4
 528:	86 60       	ori	r24, 0x06	; 6
 52a:	84 b9       	out	0x04, r24	; 4
 52c:	87 b1       	in	r24, 0x07	; 7
 52e:	86 60       	ori	r24, 0x06	; 6
 530:	87 b9       	out	0x07, r24	; 7
 532:	8a b1       	in	r24, 0x0a	; 10
 534:	83 60       	ori	r24, 0x03	; 3
 536:	8a b9       	out	0x0a, r24	; 10
 538:	85 b1       	in	r24, 0x05	; 5
 53a:	89 7f       	andi	r24, 0xF9	; 249
 53c:	85 b9       	out	0x05, r24	; 5
 53e:	88 b1       	in	r24, 0x08	; 8
 540:	86 60       	ori	r24, 0x06	; 6
 542:	88 b9       	out	0x08, r24	; 8
 544:	8b b1       	in	r24, 0x0b	; 11
 546:	81 60       	ori	r24, 0x01	; 1
 548:	8b b9       	out	0x0b, r24	; 11
 54a:	8f e9       	ldi	r24, 0x9F	; 159
 54c:	9f e0       	ldi	r25, 0x0F	; 15
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <LCDinit+0x52>
 552:	00 c0       	rjmp	.+0      	; 0x554 <LCDinit+0x58>
 554:	00 00       	nop
 556:	8b b1       	in	r24, 0x0b	; 11
 558:	8e 7f       	andi	r24, 0xFE	; 254
 55a:	8b b9       	out	0x0b, r24	; 11
 55c:	8f e9       	ldi	r24, 0x9F	; 159
 55e:	9f e0       	ldi	r25, 0x0F	; 15
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	f1 f7       	brne	.-4      	; 0x560 <LCDinit+0x64>
 564:	00 c0       	rjmp	.+0      	; 0x566 <LCDinit+0x6a>
 566:	00 00       	nop
 568:	85 b1       	in	r24, 0x05	; 5
 56a:	89 7f       	andi	r24, 0xF9	; 249
 56c:	85 b9       	out	0x05, r24	; 5
 56e:	88 b1       	in	r24, 0x08	; 8
 570:	86 60       	ori	r24, 0x06	; 6
 572:	88 b9       	out	0x08, r24	; 8
 574:	8b b1       	in	r24, 0x0b	; 11
 576:	81 60       	ori	r24, 0x01	; 1
 578:	8b b9       	out	0x0b, r24	; 11
 57a:	8f e9       	ldi	r24, 0x9F	; 159
 57c:	9f e0       	ldi	r25, 0x0F	; 15
 57e:	01 97       	sbiw	r24, 0x01	; 1
 580:	f1 f7       	brne	.-4      	; 0x57e <LCDinit+0x82>
 582:	00 c0       	rjmp	.+0      	; 0x584 <LCDinit+0x88>
 584:	00 00       	nop
 586:	8b b1       	in	r24, 0x0b	; 11
 588:	8e 7f       	andi	r24, 0xFE	; 254
 58a:	8b b9       	out	0x0b, r24	; 11
 58c:	8f e9       	ldi	r24, 0x9F	; 159
 58e:	9f e0       	ldi	r25, 0x0F	; 15
 590:	01 97       	sbiw	r24, 0x01	; 1
 592:	f1 f7       	brne	.-4      	; 0x590 <LCDinit+0x94>
 594:	00 c0       	rjmp	.+0      	; 0x596 <LCDinit+0x9a>
 596:	00 00       	nop
 598:	85 b1       	in	r24, 0x05	; 5
 59a:	89 7f       	andi	r24, 0xF9	; 249
 59c:	85 b9       	out	0x05, r24	; 5
 59e:	88 b1       	in	r24, 0x08	; 8
 5a0:	89 7f       	andi	r24, 0xF9	; 249
 5a2:	84 60       	ori	r24, 0x04	; 4
 5a4:	88 b9       	out	0x08, r24	; 8
 5a6:	8b b1       	in	r24, 0x0b	; 11
 5a8:	81 60       	ori	r24, 0x01	; 1
 5aa:	8b b9       	out	0x0b, r24	; 11
 5ac:	8f e9       	ldi	r24, 0x9F	; 159
 5ae:	9f e0       	ldi	r25, 0x0F	; 15
 5b0:	01 97       	sbiw	r24, 0x01	; 1
 5b2:	f1 f7       	brne	.-4      	; 0x5b0 <LCDinit+0xb4>
 5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <LCDinit+0xba>
 5b6:	00 00       	nop
 5b8:	8b b1       	in	r24, 0x0b	; 11
 5ba:	8e 7f       	andi	r24, 0xFE	; 254
 5bc:	8b b9       	out	0x0b, r24	; 11
 5be:	8f e9       	ldi	r24, 0x9F	; 159
 5c0:	9f e0       	ldi	r25, 0x0F	; 15
 5c2:	01 97       	sbiw	r24, 0x01	; 1
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <LCDinit+0xc6>
 5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <LCDinit+0xcc>
 5c8:	00 00       	nop
 5ca:	88 e2       	ldi	r24, 0x28	; 40
 5cc:	0e 94 a9 01 	call	0x352	; 0x352 <LCDsendCommand>
 5d0:	8c e0       	ldi	r24, 0x0C	; 12
 5d2:	0e 94 a9 01 	call	0x352	; 0x352 <LCDsendCommand>
 5d6:	60 e0       	ldi	r22, 0x00	; 0
 5d8:	c0 e0       	ldi	r28, 0x00	; 0
 5da:	0a c0       	rjmp	.+20     	; 0x5f0 <LCDinit+0xf4>
 5dc:	d1 e0       	ldi	r29, 0x01	; 1
 5de:	d6 0f       	add	r29, r22
 5e0:	8c 2f       	mov	r24, r28
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	88 59       	subi	r24, 0x98	; 152
 5e6:	9f 4f       	sbci	r25, 0xFF	; 255
 5e8:	0e 94 54 02 	call	0x4a8	; 0x4a8 <LCDdefinechar>
 5ec:	c8 5f       	subi	r28, 0xF8	; 248
 5ee:	6d 2f       	mov	r22, r29
 5f0:	c0 34       	cpi	r28, 0x40	; 64
 5f2:	a0 f3       	brcs	.-24     	; 0x5dc <LCDinit+0xe0>
 5f4:	df 91       	pop	r29
 5f6:	cf 91       	pop	r28
 5f8:	08 95       	ret

000005fa <LCDescribeDato>:
 5fa:	ef 92       	push	r14
 5fc:	ff 92       	push	r15
 5fe:	0f 93       	push	r16
 600:	1f 93       	push	r17
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
 606:	00 d0       	rcall	.+0      	; 0x608 <LCDescribeDato+0xe>
 608:	00 d0       	rcall	.+0      	; 0x60a <LCDescribeDato+0x10>
 60a:	1f 92       	push	r1
 60c:	cd b7       	in	r28, 0x3d	; 61
 60e:	de b7       	in	r29, 0x3e	; 62
 610:	7b 01       	movw	r14, r22
 612:	fe 01       	movw	r30, r28
 614:	31 96       	adiw	r30, 0x01	; 1
 616:	25 e0       	ldi	r18, 0x05	; 5
 618:	df 01       	movw	r26, r30
 61a:	1d 92       	st	X+, r1
 61c:	2a 95       	dec	r18
 61e:	e9 f7       	brne	.-6      	; 0x61a <LCDescribeDato+0x20>
 620:	24 e0       	ldi	r18, 0x04	; 4
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	0f c0       	rjmp	.+30     	; 0x644 <LCDescribeDato+0x4a>
 626:	6a e0       	ldi	r22, 0x0A	; 10
 628:	70 e0       	ldi	r23, 0x00	; 0
 62a:	0e 94 9a 03 	call	0x734	; 0x734 <__divmodhi4>
 62e:	e1 e0       	ldi	r30, 0x01	; 1
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	ec 0f       	add	r30, r28
 634:	fd 1f       	adc	r31, r29
 636:	e2 0f       	add	r30, r18
 638:	f3 1f       	adc	r31, r19
 63a:	80 83       	st	Z, r24
 63c:	86 2f       	mov	r24, r22
 63e:	97 2f       	mov	r25, r23
 640:	21 50       	subi	r18, 0x01	; 1
 642:	31 09       	sbc	r19, r1
 644:	00 97       	sbiw	r24, 0x00	; 0
 646:	79 f7       	brne	.-34     	; 0x626 <LCDescribeDato+0x2c>
 648:	bf ef       	ldi	r27, 0xFF	; 255
 64a:	eb 16       	cp	r14, r27
 64c:	fb 06       	cpc	r15, r27
 64e:	81 f4       	brne	.+32     	; 0x670 <LCDescribeDato+0x76>
 650:	03 c0       	rjmp	.+6      	; 0x658 <LCDescribeDato+0x5e>
 652:	0f 5f       	subi	r16, 0xFF	; 255
 654:	1f 4f       	sbci	r17, 0xFF	; 255
 656:	02 c0       	rjmp	.+4      	; 0x65c <LCDescribeDato+0x62>
 658:	00 e0       	ldi	r16, 0x00	; 0
 65a:	10 e0       	ldi	r17, 0x00	; 0
 65c:	e1 e0       	ldi	r30, 0x01	; 1
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	ec 0f       	add	r30, r28
 662:	fd 1f       	adc	r31, r29
 664:	e0 0f       	add	r30, r16
 666:	f1 1f       	adc	r31, r17
 668:	20 81       	ld	r18, Z
 66a:	22 23       	and	r18, r18
 66c:	91 f3       	breq	.-28     	; 0x652 <LCDescribeDato+0x58>
 66e:	04 c0       	rjmp	.+8      	; 0x678 <LCDescribeDato+0x7e>
 670:	05 e0       	ldi	r16, 0x05	; 5
 672:	10 e0       	ldi	r17, 0x00	; 0
 674:	0e 19       	sub	r16, r14
 676:	1f 09       	sbc	r17, r15
 678:	99 23       	and	r25, r25
 67a:	84 f4       	brge	.+32     	; 0x69c <LCDescribeDato+0xa2>
 67c:	8d e2       	ldi	r24, 0x2D	; 45
 67e:	0e 94 11 01 	call	0x222	; 0x222 <LCDsendChar>
 682:	0c c0       	rjmp	.+24     	; 0x69c <LCDescribeDato+0xa2>
 684:	e1 e0       	ldi	r30, 0x01	; 1
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	ec 0f       	add	r30, r28
 68a:	fd 1f       	adc	r31, r29
 68c:	e0 0f       	add	r30, r16
 68e:	f1 1f       	adc	r31, r17
 690:	80 81       	ld	r24, Z
 692:	80 5d       	subi	r24, 0xD0	; 208
 694:	0e 94 11 01 	call	0x222	; 0x222 <LCDsendChar>
 698:	0f 5f       	subi	r16, 0xFF	; 255
 69a:	1f 4f       	sbci	r17, 0xFF	; 255
 69c:	05 30       	cpi	r16, 0x05	; 5
 69e:	11 05       	cpc	r17, r1
 6a0:	8c f3       	brlt	.-30     	; 0x684 <LCDescribeDato+0x8a>
 6a2:	0f 90       	pop	r0
 6a4:	0f 90       	pop	r0
 6a6:	0f 90       	pop	r0
 6a8:	0f 90       	pop	r0
 6aa:	0f 90       	pop	r0
 6ac:	df 91       	pop	r29
 6ae:	cf 91       	pop	r28
 6b0:	1f 91       	pop	r17
 6b2:	0f 91       	pop	r16
 6b4:	ff 90       	pop	r15
 6b6:	ef 90       	pop	r14
 6b8:	08 95       	ret

000006ba <main>:
#include "dht11.h"
#include "lcd.h"


int main(void)
{
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
 6be:	00 d0       	rcall	.+0      	; 0x6c0 <main+0x6>
 6c0:	00 d0       	rcall	.+0      	; 0x6c2 <main+0x8>
 6c2:	cd b7       	in	r28, 0x3d	; 61
 6c4:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	
	LCDinit();
 6c6:	0e 94 7e 02 	call	0x4fc	; 0x4fc <LCDinit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6ca:	2f ef       	ldi	r18, 0xFF	; 255
 6cc:	81 ee       	ldi	r24, 0xE1	; 225
 6ce:	94 e0       	ldi	r25, 0x04	; 4
 6d0:	21 50       	subi	r18, 0x01	; 1
 6d2:	80 40       	sbci	r24, 0x00	; 0
 6d4:	90 40       	sbci	r25, 0x00	; 0
 6d6:	e1 f7       	brne	.-8      	; 0x6d0 <main+0x16>
 6d8:	00 c0       	rjmp	.+0      	; 0x6da <main+0x20>
 6da:	00 00       	nop
	_delay_ms(100);
	LCDhome();
 6dc:	0e 94 41 02 	call	0x482	; 0x482 <LCDhome>
    
	uint8_t h_t[4]={0,0,0,0};
 6e0:	19 82       	std	Y+1, r1	; 0x01
 6e2:	1a 82       	std	Y+2, r1	; 0x02
 6e4:	1b 82       	std	Y+3, r1	; 0x03
 6e6:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t flagCheck=0;
	while (1) 
    {
		flagCheck=leer(h_t);
 6e8:	ce 01       	movw	r24, r28
 6ea:	01 96       	adiw	r24, 0x01	; 1
 6ec:	0e 94 8a 00 	call	0x114	; 0x114 <leer>
		if(flagCheck){
 6f0:	88 23       	and	r24, r24
 6f2:	b1 f0       	breq	.+44     	; 0x720 <main+0x66>
			LCDclr();
 6f4:	0e 94 3d 02 	call	0x47a	; 0x47a <LCDclr>
			LCDGotoXY(0,0);
 6f8:	60 e0       	ldi	r22, 0x00	; 0
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	0e 94 45 02 	call	0x48a	; 0x48a <LCDGotoXY>
			LCDescribeDato(h_t[0],2);
 700:	89 81       	ldd	r24, Y+1	; 0x01
 702:	62 e0       	ldi	r22, 0x02	; 2
 704:	70 e0       	ldi	r23, 0x00	; 0
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LCDescribeDato>
			LCDGotoXY(0,1);
 70c:	61 e0       	ldi	r22, 0x01	; 1
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	0e 94 45 02 	call	0x48a	; 0x48a <LCDGotoXY>
			LCDescribeDato(h_t[2],2);
 714:	8b 81       	ldd	r24, Y+3	; 0x03
 716:	62 e0       	ldi	r22, 0x02	; 2
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <LCDescribeDato>
 720:	2f ef       	ldi	r18, 0xFF	; 255
 722:	87 ea       	ldi	r24, 0xA7	; 167
 724:	91 e6       	ldi	r25, 0x61	; 97
 726:	21 50       	subi	r18, 0x01	; 1
 728:	80 40       	sbci	r24, 0x00	; 0
 72a:	90 40       	sbci	r25, 0x00	; 0
 72c:	e1 f7       	brne	.-8      	; 0x726 <main+0x6c>
 72e:	00 c0       	rjmp	.+0      	; 0x730 <main+0x76>
 730:	00 00       	nop
 732:	da cf       	rjmp	.-76     	; 0x6e8 <main+0x2e>

00000734 <__divmodhi4>:
 734:	97 fb       	bst	r25, 7
 736:	07 2e       	mov	r0, r23
 738:	16 f4       	brtc	.+4      	; 0x73e <__divmodhi4+0xa>
 73a:	00 94       	com	r0
 73c:	07 d0       	rcall	.+14     	; 0x74c <__divmodhi4_neg1>
 73e:	77 fd       	sbrc	r23, 7
 740:	09 d0       	rcall	.+18     	; 0x754 <__divmodhi4_neg2>
 742:	0e 94 ae 03 	call	0x75c	; 0x75c <__udivmodhi4>
 746:	07 fc       	sbrc	r0, 7
 748:	05 d0       	rcall	.+10     	; 0x754 <__divmodhi4_neg2>
 74a:	3e f4       	brtc	.+14     	; 0x75a <__divmodhi4_exit>

0000074c <__divmodhi4_neg1>:
 74c:	90 95       	com	r25
 74e:	81 95       	neg	r24
 750:	9f 4f       	sbci	r25, 0xFF	; 255
 752:	08 95       	ret

00000754 <__divmodhi4_neg2>:
 754:	70 95       	com	r23
 756:	61 95       	neg	r22
 758:	7f 4f       	sbci	r23, 0xFF	; 255

0000075a <__divmodhi4_exit>:
 75a:	08 95       	ret

0000075c <__udivmodhi4>:
 75c:	aa 1b       	sub	r26, r26
 75e:	bb 1b       	sub	r27, r27
 760:	51 e1       	ldi	r21, 0x11	; 17
 762:	07 c0       	rjmp	.+14     	; 0x772 <__udivmodhi4_ep>

00000764 <__udivmodhi4_loop>:
 764:	aa 1f       	adc	r26, r26
 766:	bb 1f       	adc	r27, r27
 768:	a6 17       	cp	r26, r22
 76a:	b7 07       	cpc	r27, r23
 76c:	10 f0       	brcs	.+4      	; 0x772 <__udivmodhi4_ep>
 76e:	a6 1b       	sub	r26, r22
 770:	b7 0b       	sbc	r27, r23

00000772 <__udivmodhi4_ep>:
 772:	88 1f       	adc	r24, r24
 774:	99 1f       	adc	r25, r25
 776:	5a 95       	dec	r21
 778:	a9 f7       	brne	.-22     	; 0x764 <__udivmodhi4_loop>
 77a:	80 95       	com	r24
 77c:	90 95       	com	r25
 77e:	bc 01       	movw	r22, r24
 780:	cd 01       	movw	r24, r26
 782:	08 95       	ret

00000784 <_exit>:
 784:	f8 94       	cli

00000786 <__stop_program>:
 786:	ff cf       	rjmp	.-2      	; 0x786 <__stop_program>
