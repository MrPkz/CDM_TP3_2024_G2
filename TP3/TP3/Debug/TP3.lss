
TP3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000790  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000814  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001824  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a9c  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b9e  00000000  00000000  00002c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c4  00000000  00000000  000037c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000578  00000000  00000000  00003a88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000137f  00000000  00000000  00004000  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  0000537f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e0 e9       	ldi	r30, 0x90	; 144
  bc:	f7 e0       	ldi	r31, 0x07	; 7
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a0 30       	cpi	r26, 0x00	; 0
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>
  ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <main>
  ce:	0c 94 c6 03 	jmp	0x78c	; 0x78c <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <inicializar_sensor>:




void inicializar_sensor(){
	DDRC |= (1 << PINC0);
  d6:	87 b1       	in	r24, 0x07	; 7
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << PINC0);
  dc:	88 b1       	in	r24, 0x08	; 8
  de:	8e 7f       	andi	r24, 0xFE	; 254
  e0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	89 ef       	ldi	r24, 0xF9	; 249
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <inicializar_sensor+0x12>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <inicializar_sensor+0x1c>
  f2:	00 00       	nop
	_delay_ms(20);
	PORTC |= (1 << PINC0);
  f4:	88 b1       	in	r24, 0x08	; 8
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	20 ea       	ldi	r18, 0xA0	; 160
  fc:	2a 95       	dec	r18
  fe:	f1 f7       	brne	.-4      	; 0xfc <inicializar_sensor+0x26>
	_delay_us(30);
	DDRC &= ~(1 << PINC0);
 100:	87 b1       	in	r24, 0x07	; 7
 102:	8e 7f       	andi	r24, 0xFE	; 254
 104:	87 b9       	out	0x07, r24	; 7
 106:	8f e7       	ldi	r24, 0x7F	; 127
 108:	92 e0       	ldi	r25, 0x02	; 2
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <inicializar_sensor+0x34>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <inicializar_sensor+0x3a>
 110:	00 00       	nop
 112:	08 95       	ret

00000114 <leer>:
	_delay_us(160);
}

uint8_t leer(uint8_t* res){
 114:	ef 92       	push	r14
 116:	ff 92       	push	r15
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	7c 01       	movw	r14, r24
	uint8_t i, checksum= 0, aux = 0, posAct = 0, numAct = 0;
	DDRC |= (1 << PINC1); 
 122:	87 b1       	in	r24, 0x07	; 7
 124:	82 60       	ori	r24, 0x02	; 2
 126:	87 b9       	out	0x07, r24	; 7
	inicializar_sensor();
 128:	0e 94 6b 00 	call	0xd6	; 0xd6 <inicializar_sensor>
 12c:	87 ec       	ldi	r24, 0xC7	; 199
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	01 97       	sbiw	r24, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <leer+0x1c>
 134:	00 c0       	rjmp	.+0      	; 0x136 <leer+0x22>
 136:	00 00       	nop
	_delay_us(50);
	PORTC |= (1 << PINC1);
 138:	88 b1       	in	r24, 0x08	; 8
 13a:	82 60       	ori	r24, 0x02	; 2
 13c:	88 b9       	out	0x08, r24	; 8
 13e:	95 e0       	ldi	r25, 0x05	; 5
 140:	9a 95       	dec	r25
 142:	f1 f7       	brne	.-4      	; 0x140 <leer+0x2c>
 144:	00 00       	nop
	_delay_us(1);
	PORTC &= ~(1 << PINC1);
 146:	88 b1       	in	r24, 0x08	; 8
 148:	8d 7f       	andi	r24, 0xFD	; 253
 14a:	88 b9       	out	0x08, r24	; 8
	DDRC &= ~(1 << PINC0);
	_delay_us(160);
}

uint8_t leer(uint8_t* res){
	uint8_t i, checksum= 0, aux = 0, posAct = 0, numAct = 0;
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	50 e0       	ldi	r21, 0x00	; 0
	inicializar_sensor();
	_delay_us(50);
	PORTC |= (1 << PINC1);
	_delay_us(1);
	PORTC &= ~(1 << PINC1);
	for(i = 0; i<32; i++){
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	3e c0       	rjmp	.+124    	; 0x1d2 <leer+0xbe>
 156:	e7 ec       	ldi	r30, 0xC7	; 199
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	31 97       	sbiw	r30, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <leer+0x46>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <leer+0x4c>
 160:	00 00       	nop
		_delay_us(50);
		aux |= ((PINC & (1 << PINC0)))<<(posAct);
 162:	26 b1       	in	r18, 0x06	; 6
 164:	21 70       	andi	r18, 0x01	; 1
 166:	c2 2f       	mov	r28, r18
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	df 2f       	mov	r29, r31
 16c:	9e 01       	movw	r18, r28
 16e:	08 2e       	mov	r0, r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <leer+0x62>
 172:	22 0f       	add	r18, r18
 174:	33 1f       	adc	r19, r19
 176:	0a 94       	dec	r0
 178:	e2 f7       	brpl	.-8      	; 0x172 <leer+0x5e>
 17a:	52 2b       	or	r21, r18
		PORTC |= (1 << PINC1);
 17c:	28 b1       	in	r18, 0x08	; 8
 17e:	22 60       	ori	r18, 0x02	; 2
 180:	28 b9       	out	0x08, r18	; 8
 182:	25 e0       	ldi	r18, 0x05	; 5
 184:	2a 95       	dec	r18
 186:	f1 f7       	brne	.-4      	; 0x184 <leer+0x70>
 188:	00 00       	nop
		_delay_us(1);
		PORTC &= ~(1 << PINC1);
 18a:	28 b1       	in	r18, 0x08	; 8
 18c:	2d 7f       	andi	r18, 0xFD	; 253
 18e:	28 b9       	out	0x08, r18	; 8
		if(++posAct == 8){
 190:	8f 5f       	subi	r24, 0xFF	; 255
 192:	88 30       	cpi	r24, 0x08	; 8
 194:	39 f4       	brne	.+14     	; 0x1a4 <leer+0x90>
			res[numAct++] = aux;
 196:	f7 01       	movw	r30, r14
 198:	e6 0f       	add	r30, r22
 19a:	f1 1d       	adc	r31, r1
 19c:	50 83       	st	Z, r21
 19e:	6f 5f       	subi	r22, 0xFF	; 255
			aux = 0;
			posAct = 0;
 1a0:	80 e0       	ldi	r24, 0x00	; 0
		PORTC |= (1 << PINC1);
		_delay_us(1);
		PORTC &= ~(1 << PINC1);
		if(++posAct == 8){
			res[numAct++] = aux;
			aux = 0;
 1a2:	50 e0       	ldi	r21, 0x00	; 0
			posAct = 0;
		}
		if(aux & (1 <<(i%8))){
 1a4:	25 2f       	mov	r18, r21
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	49 2f       	mov	r20, r25
 1aa:	47 70       	andi	r20, 0x07	; 7
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <leer+0x9e>
 1ae:	35 95       	asr	r19
 1b0:	27 95       	ror	r18
 1b2:	4a 95       	dec	r20
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <leer+0x9a>
 1b6:	20 ff       	sbrs	r18, 0
 1b8:	07 c0       	rjmp	.+14     	; 0x1c8 <leer+0xb4>
 1ba:	e3 e1       	ldi	r30, 0x13	; 19
 1bc:	f1 e0       	ldi	r31, 0x01	; 1
 1be:	31 97       	sbiw	r30, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <leer+0xaa>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <leer+0xb0>
 1c4:	00 00       	nop
 1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <leer+0xbc>
 1c8:	f5 e6       	ldi	r31, 0x65	; 101
 1ca:	fa 95       	dec	r31
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <leer+0xb6>
 1ce:	00 00       	nop
	inicializar_sensor();
	_delay_us(50);
	PORTC |= (1 << PINC1);
	_delay_us(1);
	PORTC &= ~(1 << PINC1);
	for(i = 0; i<32; i++){
 1d0:	9f 5f       	subi	r25, 0xFF	; 255
 1d2:	90 32       	cpi	r25, 0x20	; 32
 1d4:	08 f4       	brcc	.+2      	; 0x1d8 <leer+0xc4>
 1d6:	bf cf       	rjmp	.-130    	; 0x156 <leer+0x42>
 1d8:	c0 e0       	ldi	r28, 0x00	; 0
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	28 c0       	rjmp	.+80     	; 0x22e <leer+0x11a>
 1de:	e7 ec       	ldi	r30, 0xC7	; 199
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	31 97       	sbiw	r30, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <leer+0xce>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <leer+0xd4>
 1e8:	00 00       	nop
			_delay_us(19);
		}
	}
	for(i = 0; i < 8; i++){
		_delay_us(50);
		checksum |= ((PINC & (1 << PINC0)))<<(i%8);
 1ea:	96 b1       	in	r25, 0x06	; 6
 1ec:	09 2f       	mov	r16, r25
 1ee:	01 70       	andi	r16, 0x01	; 1
 1f0:	10 e0       	ldi	r17, 0x00	; 0
 1f2:	98 2f       	mov	r25, r24
 1f4:	97 70       	andi	r25, 0x07	; 7
 1f6:	98 01       	movw	r18, r16
 1f8:	09 2e       	mov	r0, r25
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <leer+0xec>
 1fc:	22 0f       	add	r18, r18
 1fe:	33 1f       	adc	r19, r19
 200:	0a 94       	dec	r0
 202:	e2 f7       	brpl	.-8      	; 0x1fc <leer+0xe8>
 204:	c2 2b       	or	r28, r18
		if(checksum & (1 <<(i%8))){
 206:	2c 2f       	mov	r18, r28
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <leer+0xfc>
 20c:	35 95       	asr	r19
 20e:	27 95       	ror	r18
 210:	9a 95       	dec	r25
 212:	e2 f7       	brpl	.-8      	; 0x20c <leer+0xf8>
 214:	20 ff       	sbrs	r18, 0
 216:	07 c0       	rjmp	.+14     	; 0x226 <leer+0x112>
 218:	e7 e1       	ldi	r30, 0x17	; 23
 21a:	f1 e0       	ldi	r31, 0x01	; 1
 21c:	31 97       	sbiw	r30, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <leer+0x108>
 220:	00 c0       	rjmp	.+0      	; 0x222 <leer+0x10e>
 222:	00 00       	nop
 224:	03 c0       	rjmp	.+6      	; 0x22c <leer+0x118>
 226:	f0 ea       	ldi	r31, 0xA0	; 160
 228:	fa 95       	dec	r31
 22a:	f1 f7       	brne	.-4      	; 0x228 <leer+0x114>
			_delay_us(69);
		}else{
			_delay_us(19);
		}
	}
	for(i = 0; i < 8; i++){
 22c:	8f 5f       	subi	r24, 0xFF	; 255
 22e:	88 30       	cpi	r24, 0x08	; 8
 230:	b0 f2       	brcs	.-84     	; 0x1de <leer+0xca>
			_delay_us(70);
		}else{
			_delay_us(30);
		}
	}
	aux = (res[0] + res[1] + res[2] + res[3]);
 232:	f7 01       	movw	r30, r14
 234:	d0 81       	ld	r29, Z
 236:	21 81       	ldd	r18, Z+1	; 0x01
 238:	92 81       	ldd	r25, Z+2	; 0x02
 23a:	83 81       	ldd	r24, Z+3	; 0x03
 23c:	d2 0f       	add	r29, r18
 23e:	d9 0f       	add	r29, r25
 240:	d8 0f       	add	r29, r24
	LCDclr();
 242:	0e 94 68 02 	call	0x4d0	; 0x4d0 <LCDclr>
	LCDhome();
 246:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCDhome>
	LCDescribeDato(res[2],3);
 24a:	f7 01       	movw	r30, r14
 24c:	82 81       	ldd	r24, Z+2	; 0x02
 24e:	63 e0       	ldi	r22, 0x03	; 3
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 19 03 	call	0x632	; 0x632 <LCDescribeDato>
	LCDescribeDato(checksum,3);
 258:	63 e0       	ldi	r22, 0x03	; 3
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	8c 2f       	mov	r24, r28
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 19 03 	call	0x632	; 0x632 <LCDescribeDato>
	return (checksum == aux);
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	cd 13       	cpse	r28, r29
 268:	80 e0       	ldi	r24, 0x00	; 0
}
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	ff 90       	pop	r15
 274:	ef 90       	pop	r14
 276:	08 95       	ret

00000278 <LCDsendChar>:
{
	for (uint8_t i=0;i<n;i++)
	{
		LCDsendCommand(0x14);
	}
}
 278:	65 b1       	in	r22, 0x05	; 5
 27a:	98 2f       	mov	r25, r24
 27c:	90 74       	andi	r25, 0x40	; 64
 27e:	49 2f       	mov	r20, r25
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	55 95       	asr	r21
 284:	47 95       	ror	r20
 286:	55 95       	asr	r21
 288:	47 95       	ror	r20
 28a:	55 95       	asr	r21
 28c:	47 95       	ror	r20
 28e:	55 95       	asr	r21
 290:	47 95       	ror	r20
 292:	98 2f       	mov	r25, r24
 294:	90 78       	andi	r25, 0x80	; 128
 296:	29 2f       	mov	r18, r25
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	02 2e       	mov	r0, r18
 29c:	23 2f       	mov	r18, r19
 29e:	00 0c       	add	r0, r0
 2a0:	22 1f       	adc	r18, r18
 2a2:	33 0b       	sbc	r19, r19
 2a4:	00 0c       	add	r0, r0
 2a6:	22 1f       	adc	r18, r18
 2a8:	33 1f       	adc	r19, r19
 2aa:	96 2f       	mov	r25, r22
 2ac:	99 7f       	andi	r25, 0xF9	; 249
 2ae:	49 2b       	or	r20, r25
 2b0:	24 2b       	or	r18, r20
 2b2:	25 b9       	out	0x05, r18	; 5
 2b4:	68 b1       	in	r22, 0x08	; 8
 2b6:	98 2f       	mov	r25, r24
 2b8:	90 71       	andi	r25, 0x10	; 16
 2ba:	49 2f       	mov	r20, r25
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	55 95       	asr	r21
 2c0:	47 95       	ror	r20
 2c2:	55 95       	asr	r21
 2c4:	47 95       	ror	r20
 2c6:	55 95       	asr	r21
 2c8:	47 95       	ror	r20
 2ca:	98 2f       	mov	r25, r24
 2cc:	90 72       	andi	r25, 0x20	; 32
 2ce:	29 2f       	mov	r18, r25
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	35 95       	asr	r19
 2d4:	27 95       	ror	r18
 2d6:	35 95       	asr	r19
 2d8:	27 95       	ror	r18
 2da:	35 95       	asr	r19
 2dc:	27 95       	ror	r18
 2de:	96 2f       	mov	r25, r22
 2e0:	99 7f       	andi	r25, 0xF9	; 249
 2e2:	49 2b       	or	r20, r25
 2e4:	24 2b       	or	r18, r20
 2e6:	28 b9       	out	0x08, r18	; 8
 2e8:	9b b1       	in	r25, 0x0b	; 11
 2ea:	92 60       	ori	r25, 0x02	; 2
 2ec:	9b b9       	out	0x0b, r25	; 11
 2ee:	9b b1       	in	r25, 0x0b	; 11
 2f0:	91 60       	ori	r25, 0x01	; 1
 2f2:	9b b9       	out	0x0b, r25	; 11
 2f4:	25 ed       	ldi	r18, 0xD5	; 213
 2f6:	2a 95       	dec	r18
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <LCDsendChar+0x7e>
 2fa:	00 00       	nop
 2fc:	9b b1       	in	r25, 0x0b	; 11
 2fe:	9e 7f       	andi	r25, 0xFE	; 254
 300:	9b b9       	out	0x0b, r25	; 11
 302:	9b b1       	in	r25, 0x0b	; 11
 304:	9d 7f       	andi	r25, 0xFD	; 253
 306:	9b b9       	out	0x0b, r25	; 11
 308:	95 ed       	ldi	r25, 0xD5	; 213
 30a:	9a 95       	dec	r25
 30c:	f1 f7       	brne	.-4      	; 0x30a <LCDsendChar+0x92>
 30e:	00 00       	nop
 310:	65 b1       	in	r22, 0x05	; 5
 312:	20 e1       	ldi	r18, 0x10	; 16
 314:	82 9f       	mul	r24, r18
 316:	c0 01       	movw	r24, r0
 318:	11 24       	eor	r1, r1
 31a:	ac 01       	movw	r20, r24
 31c:	40 74       	andi	r20, 0x40	; 64
 31e:	55 27       	eor	r21, r21
 320:	55 95       	asr	r21
 322:	47 95       	ror	r20
 324:	55 95       	asr	r21
 326:	47 95       	ror	r20
 328:	55 95       	asr	r21
 32a:	47 95       	ror	r20
 32c:	55 95       	asr	r21
 32e:	47 95       	ror	r20
 330:	9c 01       	movw	r18, r24
 332:	20 78       	andi	r18, 0x80	; 128
 334:	33 27       	eor	r19, r19
 336:	02 2e       	mov	r0, r18
 338:	23 2f       	mov	r18, r19
 33a:	00 0c       	add	r0, r0
 33c:	22 1f       	adc	r18, r18
 33e:	33 0b       	sbc	r19, r19
 340:	00 0c       	add	r0, r0
 342:	22 1f       	adc	r18, r18
 344:	33 1f       	adc	r19, r19
 346:	36 2f       	mov	r19, r22
 348:	39 7f       	andi	r19, 0xF9	; 249
 34a:	43 2b       	or	r20, r19
 34c:	24 2b       	or	r18, r20
 34e:	25 b9       	out	0x05, r18	; 5
 350:	48 b1       	in	r20, 0x08	; 8
 352:	9c 01       	movw	r18, r24
 354:	20 71       	andi	r18, 0x10	; 16
 356:	33 27       	eor	r19, r19
 358:	35 95       	asr	r19
 35a:	27 95       	ror	r18
 35c:	35 95       	asr	r19
 35e:	27 95       	ror	r18
 360:	35 95       	asr	r19
 362:	27 95       	ror	r18
 364:	80 72       	andi	r24, 0x20	; 32
 366:	99 27       	eor	r25, r25
 368:	95 95       	asr	r25
 36a:	87 95       	ror	r24
 36c:	95 95       	asr	r25
 36e:	87 95       	ror	r24
 370:	95 95       	asr	r25
 372:	87 95       	ror	r24
 374:	94 2f       	mov	r25, r20
 376:	99 7f       	andi	r25, 0xF9	; 249
 378:	29 2b       	or	r18, r25
 37a:	82 2b       	or	r24, r18
 37c:	88 b9       	out	0x08, r24	; 8
 37e:	8b b1       	in	r24, 0x0b	; 11
 380:	82 60       	ori	r24, 0x02	; 2
 382:	8b b9       	out	0x0b, r24	; 11
 384:	8b b1       	in	r24, 0x0b	; 11
 386:	81 60       	ori	r24, 0x01	; 1
 388:	8b b9       	out	0x0b, r24	; 11
 38a:	85 ed       	ldi	r24, 0xD5	; 213
 38c:	8a 95       	dec	r24
 38e:	f1 f7       	brne	.-4      	; 0x38c <LCDsendChar+0x114>
 390:	00 00       	nop
 392:	8b b1       	in	r24, 0x0b	; 11
 394:	8e 7f       	andi	r24, 0xFE	; 254
 396:	8b b9       	out	0x0b, r24	; 11
 398:	8b b1       	in	r24, 0x0b	; 11
 39a:	8d 7f       	andi	r24, 0xFD	; 253
 39c:	8b b9       	out	0x0b, r24	; 11
 39e:	95 ed       	ldi	r25, 0xD5	; 213
 3a0:	9a 95       	dec	r25
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <LCDsendChar+0x128>
 3a4:	00 00       	nop
 3a6:	08 95       	ret

000003a8 <LCDsendCommand>:
 3a8:	65 b1       	in	r22, 0x05	; 5
 3aa:	98 2f       	mov	r25, r24
 3ac:	90 74       	andi	r25, 0x40	; 64
 3ae:	49 2f       	mov	r20, r25
 3b0:	50 e0       	ldi	r21, 0x00	; 0
 3b2:	55 95       	asr	r21
 3b4:	47 95       	ror	r20
 3b6:	55 95       	asr	r21
 3b8:	47 95       	ror	r20
 3ba:	55 95       	asr	r21
 3bc:	47 95       	ror	r20
 3be:	55 95       	asr	r21
 3c0:	47 95       	ror	r20
 3c2:	98 2f       	mov	r25, r24
 3c4:	90 78       	andi	r25, 0x80	; 128
 3c6:	29 2f       	mov	r18, r25
 3c8:	30 e0       	ldi	r19, 0x00	; 0
 3ca:	02 2e       	mov	r0, r18
 3cc:	23 2f       	mov	r18, r19
 3ce:	00 0c       	add	r0, r0
 3d0:	22 1f       	adc	r18, r18
 3d2:	33 0b       	sbc	r19, r19
 3d4:	00 0c       	add	r0, r0
 3d6:	22 1f       	adc	r18, r18
 3d8:	33 1f       	adc	r19, r19
 3da:	96 2f       	mov	r25, r22
 3dc:	99 7f       	andi	r25, 0xF9	; 249
 3de:	49 2b       	or	r20, r25
 3e0:	24 2b       	or	r18, r20
 3e2:	25 b9       	out	0x05, r18	; 5
 3e4:	68 b1       	in	r22, 0x08	; 8
 3e6:	98 2f       	mov	r25, r24
 3e8:	90 71       	andi	r25, 0x10	; 16
 3ea:	49 2f       	mov	r20, r25
 3ec:	50 e0       	ldi	r21, 0x00	; 0
 3ee:	55 95       	asr	r21
 3f0:	47 95       	ror	r20
 3f2:	55 95       	asr	r21
 3f4:	47 95       	ror	r20
 3f6:	55 95       	asr	r21
 3f8:	47 95       	ror	r20
 3fa:	98 2f       	mov	r25, r24
 3fc:	90 72       	andi	r25, 0x20	; 32
 3fe:	29 2f       	mov	r18, r25
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	35 95       	asr	r19
 404:	27 95       	ror	r18
 406:	35 95       	asr	r19
 408:	27 95       	ror	r18
 40a:	35 95       	asr	r19
 40c:	27 95       	ror	r18
 40e:	96 2f       	mov	r25, r22
 410:	99 7f       	andi	r25, 0xF9	; 249
 412:	49 2b       	or	r20, r25
 414:	24 2b       	or	r18, r20
 416:	28 b9       	out	0x08, r18	; 8
 418:	9b b1       	in	r25, 0x0b	; 11
 41a:	91 60       	ori	r25, 0x01	; 1
 41c:	9b b9       	out	0x0b, r25	; 11
 41e:	ef e9       	ldi	r30, 0x9F	; 159
 420:	ff e0       	ldi	r31, 0x0F	; 15
 422:	31 97       	sbiw	r30, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 428:	00 00       	nop
 42a:	9b b1       	in	r25, 0x0b	; 11
 42c:	9e 7f       	andi	r25, 0xFE	; 254
 42e:	9b b9       	out	0x0b, r25	; 11
 430:	ef e9       	ldi	r30, 0x9F	; 159
 432:	ff e0       	ldi	r31, 0x0F	; 15
 434:	31 97       	sbiw	r30, 0x01	; 1
 436:	f1 f7       	brne	.-4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 438:	00 c0       	rjmp	.+0      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 43a:	00 00       	nop
 43c:	65 b1       	in	r22, 0x05	; 5
 43e:	f0 e1       	ldi	r31, 0x10	; 16
 440:	8f 9f       	mul	r24, r31
 442:	c0 01       	movw	r24, r0
 444:	11 24       	eor	r1, r1
 446:	ac 01       	movw	r20, r24
 448:	40 74       	andi	r20, 0x40	; 64
 44a:	55 27       	eor	r21, r21
 44c:	55 95       	asr	r21
 44e:	47 95       	ror	r20
 450:	55 95       	asr	r21
 452:	47 95       	ror	r20
 454:	55 95       	asr	r21
 456:	47 95       	ror	r20
 458:	55 95       	asr	r21
 45a:	47 95       	ror	r20
 45c:	9c 01       	movw	r18, r24
 45e:	20 78       	andi	r18, 0x80	; 128
 460:	33 27       	eor	r19, r19
 462:	02 2e       	mov	r0, r18
 464:	23 2f       	mov	r18, r19
 466:	00 0c       	add	r0, r0
 468:	22 1f       	adc	r18, r18
 46a:	33 0b       	sbc	r19, r19
 46c:	00 0c       	add	r0, r0
 46e:	22 1f       	adc	r18, r18
 470:	33 1f       	adc	r19, r19
 472:	36 2f       	mov	r19, r22
 474:	39 7f       	andi	r19, 0xF9	; 249
 476:	43 2b       	or	r20, r19
 478:	24 2b       	or	r18, r20
 47a:	25 b9       	out	0x05, r18	; 5
 47c:	48 b1       	in	r20, 0x08	; 8
 47e:	9c 01       	movw	r18, r24
 480:	20 71       	andi	r18, 0x10	; 16
 482:	33 27       	eor	r19, r19
 484:	35 95       	asr	r19
 486:	27 95       	ror	r18
 488:	35 95       	asr	r19
 48a:	27 95       	ror	r18
 48c:	35 95       	asr	r19
 48e:	27 95       	ror	r18
 490:	80 72       	andi	r24, 0x20	; 32
 492:	99 27       	eor	r25, r25
 494:	95 95       	asr	r25
 496:	87 95       	ror	r24
 498:	95 95       	asr	r25
 49a:	87 95       	ror	r24
 49c:	95 95       	asr	r25
 49e:	87 95       	ror	r24
 4a0:	94 2f       	mov	r25, r20
 4a2:	99 7f       	andi	r25, 0xF9	; 249
 4a4:	29 2b       	or	r18, r25
 4a6:	82 2b       	or	r24, r18
 4a8:	88 b9       	out	0x08, r24	; 8
 4aa:	8b b1       	in	r24, 0x0b	; 11
 4ac:	81 60       	ori	r24, 0x01	; 1
 4ae:	8b b9       	out	0x0b, r24	; 11
 4b0:	8f e9       	ldi	r24, 0x9F	; 159
 4b2:	9f e0       	ldi	r25, 0x0F	; 15
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4ba:	00 00       	nop
 4bc:	8b b1       	in	r24, 0x0b	; 11
 4be:	8e 7f       	andi	r24, 0xFE	; 254
 4c0:	8b b9       	out	0x0b, r24	; 11
 4c2:	ef e9       	ldi	r30, 0x9F	; 159
 4c4:	ff e0       	ldi	r31, 0x0F	; 15
 4c6:	31 97       	sbiw	r30, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4cc:	00 00       	nop
 4ce:	08 95       	ret

000004d0 <LCDclr>:
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCDsendCommand>
 4d6:	08 95       	ret

000004d8 <LCDhome>:
 4d8:	82 e0       	ldi	r24, 0x02	; 2
 4da:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCDsendCommand>
 4de:	08 95       	ret

000004e0 <LCDdefinechar>:
 4e0:	ef 92       	push	r14
 4e2:	ff 92       	push	r15
 4e4:	0f 93       	push	r16
 4e6:	1f 93       	push	r17
 4e8:	cf 93       	push	r28
 4ea:	df 93       	push	r29
 4ec:	7c 01       	movw	r14, r24
 4ee:	86 2f       	mov	r24, r22
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	80 64       	ori	r24, 0x40	; 64
 500:	c0 e0       	ldi	r28, 0x00	; 0
 502:	d0 e0       	ldi	r29, 0x00	; 0
 504:	0d c0       	rjmp	.+26     	; 0x520 <LCDdefinechar+0x40>
 506:	f7 01       	movw	r30, r14
 508:	ec 0f       	add	r30, r28
 50a:	fd 1f       	adc	r31, r29
 50c:	14 91       	lpm	r17, Z
 50e:	01 e0       	ldi	r16, 0x01	; 1
 510:	08 0f       	add	r16, r24
 512:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCDsendCommand>
 516:	81 2f       	mov	r24, r17
 518:	0e 94 3c 01 	call	0x278	; 0x278 <LCDsendChar>
 51c:	21 96       	adiw	r28, 0x01	; 1
 51e:	80 2f       	mov	r24, r16
 520:	c8 30       	cpi	r28, 0x08	; 8
 522:	d1 05       	cpc	r29, r1
 524:	80 f3       	brcs	.-32     	; 0x506 <LCDdefinechar+0x26>
 526:	df 91       	pop	r29
 528:	cf 91       	pop	r28
 52a:	1f 91       	pop	r17
 52c:	0f 91       	pop	r16
 52e:	ff 90       	pop	r15
 530:	ef 90       	pop	r14
 532:	08 95       	ret

00000534 <LCDinit>:
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	8f e5       	ldi	r24, 0x5F	; 95
 53a:	9a ee       	ldi	r25, 0xEA	; 234
 53c:	01 97       	sbiw	r24, 0x01	; 1
 53e:	f1 f7       	brne	.-4      	; 0x53c <LCDinit+0x8>
 540:	00 c0       	rjmp	.+0      	; 0x542 <LCDinit+0xe>
 542:	00 00       	nop
 544:	85 b1       	in	r24, 0x05	; 5
 546:	89 7f       	andi	r24, 0xF9	; 249
 548:	85 b9       	out	0x05, r24	; 5
 54a:	88 b1       	in	r24, 0x08	; 8
 54c:	89 7f       	andi	r24, 0xF9	; 249
 54e:	88 b9       	out	0x08, r24	; 8
 550:	1b b8       	out	0x0b, r1	; 11
 552:	87 b1       	in	r24, 0x07	; 7
 554:	86 60       	ori	r24, 0x06	; 6
 556:	87 b9       	out	0x07, r24	; 7
 558:	84 b1       	in	r24, 0x04	; 4
 55a:	86 60       	ori	r24, 0x06	; 6
 55c:	84 b9       	out	0x04, r24	; 4
 55e:	84 b1       	in	r24, 0x04	; 4
 560:	86 60       	ori	r24, 0x06	; 6
 562:	84 b9       	out	0x04, r24	; 4
 564:	87 b1       	in	r24, 0x07	; 7
 566:	86 60       	ori	r24, 0x06	; 6
 568:	87 b9       	out	0x07, r24	; 7
 56a:	8a b1       	in	r24, 0x0a	; 10
 56c:	83 60       	ori	r24, 0x03	; 3
 56e:	8a b9       	out	0x0a, r24	; 10
 570:	85 b1       	in	r24, 0x05	; 5
 572:	89 7f       	andi	r24, 0xF9	; 249
 574:	85 b9       	out	0x05, r24	; 5
 576:	88 b1       	in	r24, 0x08	; 8
 578:	86 60       	ori	r24, 0x06	; 6
 57a:	88 b9       	out	0x08, r24	; 8
 57c:	8b b1       	in	r24, 0x0b	; 11
 57e:	81 60       	ori	r24, 0x01	; 1
 580:	8b b9       	out	0x0b, r24	; 11
 582:	8f e9       	ldi	r24, 0x9F	; 159
 584:	9f e0       	ldi	r25, 0x0F	; 15
 586:	01 97       	sbiw	r24, 0x01	; 1
 588:	f1 f7       	brne	.-4      	; 0x586 <LCDinit+0x52>
 58a:	00 c0       	rjmp	.+0      	; 0x58c <LCDinit+0x58>
 58c:	00 00       	nop
 58e:	8b b1       	in	r24, 0x0b	; 11
 590:	8e 7f       	andi	r24, 0xFE	; 254
 592:	8b b9       	out	0x0b, r24	; 11
 594:	8f e9       	ldi	r24, 0x9F	; 159
 596:	9f e0       	ldi	r25, 0x0F	; 15
 598:	01 97       	sbiw	r24, 0x01	; 1
 59a:	f1 f7       	brne	.-4      	; 0x598 <LCDinit+0x64>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <LCDinit+0x6a>
 59e:	00 00       	nop
 5a0:	85 b1       	in	r24, 0x05	; 5
 5a2:	89 7f       	andi	r24, 0xF9	; 249
 5a4:	85 b9       	out	0x05, r24	; 5
 5a6:	88 b1       	in	r24, 0x08	; 8
 5a8:	86 60       	ori	r24, 0x06	; 6
 5aa:	88 b9       	out	0x08, r24	; 8
 5ac:	8b b1       	in	r24, 0x0b	; 11
 5ae:	81 60       	ori	r24, 0x01	; 1
 5b0:	8b b9       	out	0x0b, r24	; 11
 5b2:	8f e9       	ldi	r24, 0x9F	; 159
 5b4:	9f e0       	ldi	r25, 0x0F	; 15
 5b6:	01 97       	sbiw	r24, 0x01	; 1
 5b8:	f1 f7       	brne	.-4      	; 0x5b6 <LCDinit+0x82>
 5ba:	00 c0       	rjmp	.+0      	; 0x5bc <LCDinit+0x88>
 5bc:	00 00       	nop
 5be:	8b b1       	in	r24, 0x0b	; 11
 5c0:	8e 7f       	andi	r24, 0xFE	; 254
 5c2:	8b b9       	out	0x0b, r24	; 11
 5c4:	8f e9       	ldi	r24, 0x9F	; 159
 5c6:	9f e0       	ldi	r25, 0x0F	; 15
 5c8:	01 97       	sbiw	r24, 0x01	; 1
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <LCDinit+0x94>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <LCDinit+0x9a>
 5ce:	00 00       	nop
 5d0:	85 b1       	in	r24, 0x05	; 5
 5d2:	89 7f       	andi	r24, 0xF9	; 249
 5d4:	85 b9       	out	0x05, r24	; 5
 5d6:	88 b1       	in	r24, 0x08	; 8
 5d8:	89 7f       	andi	r24, 0xF9	; 249
 5da:	84 60       	ori	r24, 0x04	; 4
 5dc:	88 b9       	out	0x08, r24	; 8
 5de:	8b b1       	in	r24, 0x0b	; 11
 5e0:	81 60       	ori	r24, 0x01	; 1
 5e2:	8b b9       	out	0x0b, r24	; 11
 5e4:	8f e9       	ldi	r24, 0x9F	; 159
 5e6:	9f e0       	ldi	r25, 0x0F	; 15
 5e8:	01 97       	sbiw	r24, 0x01	; 1
 5ea:	f1 f7       	brne	.-4      	; 0x5e8 <LCDinit+0xb4>
 5ec:	00 c0       	rjmp	.+0      	; 0x5ee <LCDinit+0xba>
 5ee:	00 00       	nop
 5f0:	8b b1       	in	r24, 0x0b	; 11
 5f2:	8e 7f       	andi	r24, 0xFE	; 254
 5f4:	8b b9       	out	0x0b, r24	; 11
 5f6:	8f e9       	ldi	r24, 0x9F	; 159
 5f8:	9f e0       	ldi	r25, 0x0F	; 15
 5fa:	01 97       	sbiw	r24, 0x01	; 1
 5fc:	f1 f7       	brne	.-4      	; 0x5fa <LCDinit+0xc6>
 5fe:	00 c0       	rjmp	.+0      	; 0x600 <LCDinit+0xcc>
 600:	00 00       	nop
 602:	88 e2       	ldi	r24, 0x28	; 40
 604:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCDsendCommand>
 608:	8c e0       	ldi	r24, 0x0C	; 12
 60a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <LCDsendCommand>
 60e:	60 e0       	ldi	r22, 0x00	; 0
 610:	c0 e0       	ldi	r28, 0x00	; 0
 612:	0a c0       	rjmp	.+20     	; 0x628 <LCDinit+0xf4>
 614:	d1 e0       	ldi	r29, 0x01	; 1
 616:	d6 0f       	add	r29, r22
 618:	8c 2f       	mov	r24, r28
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	88 59       	subi	r24, 0x98	; 152
 61e:	9f 4f       	sbci	r25, 0xFF	; 255
 620:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCDdefinechar>
 624:	c8 5f       	subi	r28, 0xF8	; 248
 626:	6d 2f       	mov	r22, r29
 628:	c0 34       	cpi	r28, 0x40	; 64
 62a:	a0 f3       	brcs	.-24     	; 0x614 <LCDinit+0xe0>
 62c:	df 91       	pop	r29
 62e:	cf 91       	pop	r28
 630:	08 95       	ret

00000632 <LCDescribeDato>:


//**********   Inicio de Comando Agregado por Fido

void LCDescribeDato(int val,unsigned int field_length)
{
 632:	ef 92       	push	r14
 634:	ff 92       	push	r15
 636:	0f 93       	push	r16
 638:	1f 93       	push	r17
 63a:	cf 93       	push	r28
 63c:	df 93       	push	r29
 63e:	00 d0       	rcall	.+0      	; 0x640 <LCDescribeDato+0xe>
 640:	00 d0       	rcall	.+0      	; 0x642 <LCDescribeDato+0x10>
 642:	1f 92       	push	r1
 644:	cd b7       	in	r28, 0x3d	; 61
 646:	de b7       	in	r29, 0x3e	; 62
 648:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 64a:	fe 01       	movw	r30, r28
 64c:	31 96       	adiw	r30, 0x01	; 1
 64e:	25 e0       	ldi	r18, 0x05	; 5
 650:	df 01       	movw	r26, r30
 652:	1d 92       	st	X+, r1
 654:	2a 95       	dec	r18
 656:	e9 f7       	brne	.-6      	; 0x652 <LCDescribeDato+0x20>
	int i=4,j=0;
 658:	24 e0       	ldi	r18, 0x04	; 4
 65a:	30 e0       	ldi	r19, 0x00	; 0
	while(val)
 65c:	0f c0       	rjmp	.+30     	; 0x67c <LCDescribeDato+0x4a>
	{
	str[i]=val%10;
 65e:	6a e0       	ldi	r22, 0x0A	; 10
 660:	70 e0       	ldi	r23, 0x00	; 0
 662:	0e 94 9e 03 	call	0x73c	; 0x73c <__divmodhi4>
 666:	e1 e0       	ldi	r30, 0x01	; 1
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	ec 0f       	add	r30, r28
 66c:	fd 1f       	adc	r31, r29
 66e:	e2 0f       	add	r30, r18
 670:	f3 1f       	adc	r31, r19
 672:	80 83       	st	Z, r24
	val=val/10;
 674:	86 2f       	mov	r24, r22
 676:	97 2f       	mov	r25, r23
	i--;
 678:	21 50       	subi	r18, 0x01	; 1
 67a:	31 09       	sbc	r19, r1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 67c:	00 97       	sbiw	r24, 0x00	; 0
 67e:	79 f7       	brne	.-34     	; 0x65e <LCDescribeDato+0x2c>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 680:	bf ef       	ldi	r27, 0xFF	; 255
 682:	eb 16       	cp	r14, r27
 684:	fb 06       	cpc	r15, r27
 686:	81 f4       	brne	.+32     	; 0x6a8 <LCDescribeDato+0x76>
 688:	03 c0       	rjmp	.+6      	; 0x690 <LCDescribeDato+0x5e>
		while(str[j]==0) j++;
 68a:	0f 5f       	subi	r16, 0xFF	; 255
 68c:	1f 4f       	sbci	r17, 0xFF	; 255
 68e:	02 c0       	rjmp	.+4      	; 0x694 <LCDescribeDato+0x62>
 690:	00 e0       	ldi	r16, 0x00	; 0
 692:	10 e0       	ldi	r17, 0x00	; 0
 694:	e1 e0       	ldi	r30, 0x01	; 1
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	ec 0f       	add	r30, r28
 69a:	fd 1f       	adc	r31, r29
 69c:	e0 0f       	add	r30, r16
 69e:	f1 1f       	adc	r31, r17
 6a0:	20 81       	ld	r18, Z
 6a2:	22 23       	and	r18, r18
 6a4:	91 f3       	breq	.-28     	; 0x68a <LCDescribeDato+0x58>
 6a6:	04 c0       	rjmp	.+8      	; 0x6b0 <LCDescribeDato+0x7e>
	else
		j=5-field_length;
 6a8:	05 e0       	ldi	r16, 0x05	; 5
 6aa:	10 e0       	ldi	r17, 0x00	; 0
 6ac:	0e 19       	sub	r16, r14
 6ae:	1f 09       	sbc	r17, r15

	if(val<0) LCDsendChar('-');
 6b0:	99 23       	and	r25, r25
 6b2:	84 f4       	brge	.+32     	; 0x6d4 <LCDescribeDato+0xa2>
 6b4:	8d e2       	ldi	r24, 0x2D	; 45
 6b6:	0e 94 3c 01 	call	0x278	; 0x278 <LCDsendChar>
 6ba:	0c c0       	rjmp	.+24     	; 0x6d4 <LCDescribeDato+0xa2>
	for(i=j;i<5;i++)
	{
	LCDsendChar(48+str[i]);
 6bc:	e1 e0       	ldi	r30, 0x01	; 1
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	ec 0f       	add	r30, r28
 6c2:	fd 1f       	adc	r31, r29
 6c4:	e0 0f       	add	r30, r16
 6c6:	f1 1f       	adc	r31, r17
 6c8:	80 81       	ld	r24, Z
 6ca:	80 5d       	subi	r24, 0xD0	; 208
 6cc:	0e 94 3c 01 	call	0x278	; 0x278 <LCDsendChar>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDsendChar('-');
	for(i=j;i<5;i++)
 6d0:	0f 5f       	subi	r16, 0xFF	; 255
 6d2:	1f 4f       	sbci	r17, 0xFF	; 255
 6d4:	05 30       	cpi	r16, 0x05	; 5
 6d6:	11 05       	cpc	r17, r1
 6d8:	8c f3       	brlt	.-30     	; 0x6bc <LCDescribeDato+0x8a>
	{
	LCDsendChar(48+str[i]);
	}
}
 6da:	0f 90       	pop	r0
 6dc:	0f 90       	pop	r0
 6de:	0f 90       	pop	r0
 6e0:	0f 90       	pop	r0
 6e2:	0f 90       	pop	r0
 6e4:	df 91       	pop	r29
 6e6:	cf 91       	pop	r28
 6e8:	1f 91       	pop	r17
 6ea:	0f 91       	pop	r16
 6ec:	ff 90       	pop	r15
 6ee:	ef 90       	pop	r14
 6f0:	08 95       	ret

000006f2 <main>:
#include "dht11.h"
#include "lcd.h"


int main(void)
{
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
 6f6:	00 d0       	rcall	.+0      	; 0x6f8 <main+0x6>
 6f8:	00 d0       	rcall	.+0      	; 0x6fa <main+0x8>
 6fa:	cd b7       	in	r28, 0x3d	; 61
 6fc:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	
	LCDinit();
 6fe:	0e 94 9a 02 	call	0x534	; 0x534 <LCDinit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 702:	2f ef       	ldi	r18, 0xFF	; 255
 704:	81 ee       	ldi	r24, 0xE1	; 225
 706:	94 e0       	ldi	r25, 0x04	; 4
 708:	21 50       	subi	r18, 0x01	; 1
 70a:	80 40       	sbci	r24, 0x00	; 0
 70c:	90 40       	sbci	r25, 0x00	; 0
 70e:	e1 f7       	brne	.-8      	; 0x708 <main+0x16>
 710:	00 c0       	rjmp	.+0      	; 0x712 <main+0x20>
 712:	00 00       	nop
	_delay_ms(100);
	LCDhome();
 714:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <LCDhome>
    
	uint8_t h_t[4]={0,0,0,0};
 718:	19 82       	std	Y+1, r1	; 0x01
 71a:	1a 82       	std	Y+2, r1	; 0x02
 71c:	1b 82       	std	Y+3, r1	; 0x03
 71e:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t flagCheck=0;
	while (1) 
    {
		flagCheck=leer(h_t);
 720:	ce 01       	movw	r24, r28
 722:	01 96       	adiw	r24, 0x01	; 1
 724:	0e 94 8a 00 	call	0x114	; 0x114 <leer>
 728:	2f ef       	ldi	r18, 0xFF	; 255
 72a:	87 ea       	ldi	r24, 0xA7	; 167
 72c:	91 e6       	ldi	r25, 0x61	; 97
 72e:	21 50       	subi	r18, 0x01	; 1
 730:	80 40       	sbci	r24, 0x00	; 0
 732:	90 40       	sbci	r25, 0x00	; 0
 734:	e1 f7       	brne	.-8      	; 0x72e <main+0x3c>
 736:	00 c0       	rjmp	.+0      	; 0x738 <main+0x46>
 738:	00 00       	nop
 73a:	f2 cf       	rjmp	.-28     	; 0x720 <main+0x2e>

0000073c <__divmodhi4>:
 73c:	97 fb       	bst	r25, 7
 73e:	07 2e       	mov	r0, r23
 740:	16 f4       	brtc	.+4      	; 0x746 <__divmodhi4+0xa>
 742:	00 94       	com	r0
 744:	07 d0       	rcall	.+14     	; 0x754 <__divmodhi4_neg1>
 746:	77 fd       	sbrc	r23, 7
 748:	09 d0       	rcall	.+18     	; 0x75c <__divmodhi4_neg2>
 74a:	0e 94 b2 03 	call	0x764	; 0x764 <__udivmodhi4>
 74e:	07 fc       	sbrc	r0, 7
 750:	05 d0       	rcall	.+10     	; 0x75c <__divmodhi4_neg2>
 752:	3e f4       	brtc	.+14     	; 0x762 <__divmodhi4_exit>

00000754 <__divmodhi4_neg1>:
 754:	90 95       	com	r25
 756:	81 95       	neg	r24
 758:	9f 4f       	sbci	r25, 0xFF	; 255
 75a:	08 95       	ret

0000075c <__divmodhi4_neg2>:
 75c:	70 95       	com	r23
 75e:	61 95       	neg	r22
 760:	7f 4f       	sbci	r23, 0xFF	; 255

00000762 <__divmodhi4_exit>:
 762:	08 95       	ret

00000764 <__udivmodhi4>:
 764:	aa 1b       	sub	r26, r26
 766:	bb 1b       	sub	r27, r27
 768:	51 e1       	ldi	r21, 0x11	; 17
 76a:	07 c0       	rjmp	.+14     	; 0x77a <__udivmodhi4_ep>

0000076c <__udivmodhi4_loop>:
 76c:	aa 1f       	adc	r26, r26
 76e:	bb 1f       	adc	r27, r27
 770:	a6 17       	cp	r26, r22
 772:	b7 07       	cpc	r27, r23
 774:	10 f0       	brcs	.+4      	; 0x77a <__udivmodhi4_ep>
 776:	a6 1b       	sub	r26, r22
 778:	b7 0b       	sbc	r27, r23

0000077a <__udivmodhi4_ep>:
 77a:	88 1f       	adc	r24, r24
 77c:	99 1f       	adc	r25, r25
 77e:	5a 95       	dec	r21
 780:	a9 f7       	brne	.-22     	; 0x76c <__udivmodhi4_loop>
 782:	80 95       	com	r24
 784:	90 95       	com	r25
 786:	bc 01       	movw	r22, r24
 788:	cd 01       	movw	r24, r26
 78a:	08 95       	ret

0000078c <_exit>:
 78c:	f8 94       	cli

0000078e <__stop_program>:
 78e:	ff cf       	rjmp	.-2      	; 0x78e <__stop_program>
