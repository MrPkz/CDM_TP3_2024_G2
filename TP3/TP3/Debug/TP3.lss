
TP3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000007da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000786  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000007da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000080c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000171b  00000000  00000000  0000095c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a82  00000000  00000000  00002077  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bbb  00000000  00000000  00002af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c4  00000000  00000000  000036b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005c4  00000000  00000000  00003978  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012bd  00000000  00000000  00003f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  000051f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000068 <LcdCustomChar>:
  68:	00 1f 00 00 00 00 1f 00 00 1f 10 10 10 10 1f 00     ................
  78:	00 1f 18 18 18 18 1f 00 00 1f 1c 1c 1c 1c 1f 00     ................
  88:	00 1f 1e 1e 1e 1e 1f 00 00 1f 1f 1f 1f 1f 1f 00     ................
  98:	03 07 0f 1f 0f 07 03 00 18 1c 1e 1f 1e 1c 18 00     ................

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e6 e8       	ldi	r30, 0x86	; 134
  bc:	f7 e0       	ldi	r31, 0x07	; 7
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a0 30       	cpi	r26, 0x00	; 0
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>
  ca:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <main>
  ce:	0c 94 c1 03 	jmp	0x782	; 0x782 <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <inicializar_sensor>:




void inicializar_sensor(){
	DDRC |= (1 << PINC0);
  d6:	87 b1       	in	r24, 0x07	; 7
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << PINC0);
  dc:	88 b1       	in	r24, 0x08	; 8
  de:	8e 7f       	andi	r24, 0xFE	; 254
  e0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	89 ef       	ldi	r24, 0xF9	; 249
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <inicializar_sensor+0x12>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <inicializar_sensor+0x1c>
  f2:	00 00       	nop
	_delay_ms(20);
	PORTC |= (1 << PINC0);
  f4:	88 b1       	in	r24, 0x08	; 8
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	20 ea       	ldi	r18, 0xA0	; 160
  fc:	2a 95       	dec	r18
  fe:	f1 f7       	brne	.-4      	; 0xfc <inicializar_sensor+0x26>
	_delay_us(30);
	DDRC &= ~(1 << PINC0);
 100:	87 b1       	in	r24, 0x07	; 7
 102:	8e 7f       	andi	r24, 0xFE	; 254
 104:	87 b9       	out	0x07, r24	; 7
 106:	8f e7       	ldi	r24, 0x7F	; 127
 108:	92 e0       	ldi	r25, 0x02	; 2
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <inicializar_sensor+0x34>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <inicializar_sensor+0x3a>
 110:	00 00       	nop
 112:	08 95       	ret

00000114 <leer>:
	_delay_us(160);
}

uint8_t leer(uint8_t* res){
 114:	ef 92       	push	r14
 116:	ff 92       	push	r15
 118:	0f 93       	push	r16
 11a:	1f 93       	push	r17
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	7c 01       	movw	r14, r24
	uint8_t i, checksum= 0, aux = 0, posAct = 0, numAct = 0, salidaAct = 0, salidaAnt = 0; 
	DDRC |= (1 << PINC3);
 122:	87 b1       	in	r24, 0x07	; 7
 124:	88 60       	ori	r24, 0x08	; 8
 126:	87 b9       	out	0x07, r24	; 7
	inicializar_sensor();
 128:	0e 94 6b 00 	call	0xd6	; 0xd6 <inicializar_sensor>
	DDRC &= ~(1 << PINC0);
	_delay_us(160);
}

uint8_t leer(uint8_t* res){
	uint8_t i, checksum= 0, aux = 0, posAct = 0, numAct = 0, salidaAct = 0, salidaAnt = 0; 
 12c:	80 e0       	ldi	r24, 0x00	; 0
	DDRC |= (1 << PINC3);
	inicializar_sensor();
	while(salidaAct != 1){
 12e:	02 c0       	rjmp	.+4      	; 0x134 <leer+0x20>
		salidaAct = (PINC & (1 << PINC0));
 130:	86 b1       	in	r24, 0x06	; 6
 132:	81 70       	andi	r24, 0x01	; 1

uint8_t leer(uint8_t* res){
	uint8_t i, checksum= 0, aux = 0, posAct = 0, numAct = 0, salidaAct = 0, salidaAnt = 0; 
	DDRC |= (1 << PINC3);
	inicializar_sensor();
	while(salidaAct != 1){
 134:	81 30       	cpi	r24, 0x01	; 1
 136:	e1 f7       	brne	.-8      	; 0x130 <leer+0x1c>
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	e0 e0       	ldi	r30, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	35 c0       	rjmp	.+106    	; 0x1ae <leer+0x9a>
 144:	a7 ec       	ldi	r26, 0xC7	; 199
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	11 97       	sbiw	r26, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <leer+0x34>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <leer+0x3a>
 14e:	00 00       	nop
		salidaAct = (PINC & (1 << PINC0));
	}
	for(i = 0; i<32; i++){
		_delay_us(50);
		PORTC |= (1 << PINC3);
 150:	98 b1       	in	r25, 0x08	; 8
 152:	98 60       	ori	r25, 0x08	; 8
 154:	98 b9       	out	0x08, r25	; 8
 156:	b5 e0       	ldi	r27, 0x05	; 5
 158:	ba 95       	dec	r27
 15a:	f1 f7       	brne	.-4      	; 0x158 <leer+0x44>
 15c:	00 00       	nop
		_delay_us(1);
		PORTC &= ~(1 << PINC3);
 15e:	98 b1       	in	r25, 0x08	; 8
 160:	97 7f       	andi	r25, 0xF7	; 247
 162:	98 b9       	out	0x08, r25	; 8
		aux |= ((PINC & (1 << PINC0)))<<(7-posAct);
 164:	96 b1       	in	r25, 0x06	; 6
 166:	91 70       	andi	r25, 0x01	; 1
 168:	c9 2f       	mov	r28, r25
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	df 2f       	mov	r29, r31
 16e:	47 e0       	ldi	r20, 0x07	; 7
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	43 1b       	sub	r20, r19
 174:	51 09       	sbc	r21, r1
 176:	de 01       	movw	r26, r28
 178:	02 c0       	rjmp	.+4      	; 0x17e <leer+0x6a>
 17a:	aa 0f       	add	r26, r26
 17c:	bb 1f       	adc	r27, r27
 17e:	4a 95       	dec	r20
 180:	e2 f7       	brpl	.-8      	; 0x17a <leer+0x66>
 182:	7a 2b       	or	r23, r26
		if(++posAct == 8){
 184:	3f 5f       	subi	r19, 0xFF	; 255
 186:	38 30       	cpi	r19, 0x08	; 8
 188:	61 f4       	brne	.+24     	; 0x1a2 <leer+0x8e>
			res[numAct++] = aux;
 18a:	d7 01       	movw	r26, r14
 18c:	ae 0f       	add	r26, r30
 18e:	b1 1d       	adc	r27, r1
 190:	7c 93       	st	X, r23
 192:	ef 5f       	subi	r30, 0xFF	; 255
			aux = 0;
			posAct = 0;
 194:	30 e0       	ldi	r19, 0x00	; 0
		_delay_us(1);
		PORTC &= ~(1 << PINC3);
		aux |= ((PINC & (1 << PINC0)))<<(7-posAct);
		if(++posAct == 8){
			res[numAct++] = aux;
			aux = 0;
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	04 c0       	rjmp	.+8      	; 0x1a2 <leer+0x8e>
			posAct = 0;
		}
		while(!(salidaAct == 1 && salidaAnt == 0)){
			salidaAnt = salidaAct;
			salidaAct = (PINC & (1 << PINC0));
 19a:	96 b1       	in	r25, 0x06	; 6
			res[numAct++] = aux;
			aux = 0;
			posAct = 0;
		}
		while(!(salidaAct == 1 && salidaAnt == 0)){
			salidaAnt = salidaAct;
 19c:	28 2f       	mov	r18, r24
			salidaAct = (PINC & (1 << PINC0));
 19e:	89 2f       	mov	r24, r25
 1a0:	81 70       	andi	r24, 0x01	; 1
		if(++posAct == 8){
			res[numAct++] = aux;
			aux = 0;
			posAct = 0;
		}
		while(!(salidaAct == 1 && salidaAnt == 0)){
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	d1 f7       	brne	.-12     	; 0x19a <leer+0x86>
 1a6:	21 11       	cpse	r18, r1
 1a8:	f8 cf       	rjmp	.-16     	; 0x19a <leer+0x86>
	DDRC |= (1 << PINC3);
	inicializar_sensor();
	while(salidaAct != 1){
		salidaAct = (PINC & (1 << PINC0));
	}
	for(i = 0; i<32; i++){
 1aa:	6f 5f       	subi	r22, 0xFF	; 255
		while(!(salidaAct == 1 && salidaAnt == 0)){
			salidaAnt = salidaAct;
			salidaAct = (PINC & (1 << PINC0));
		}

		salidaAnt = 1;
 1ac:	28 2f       	mov	r18, r24
	DDRC |= (1 << PINC3);
	inicializar_sensor();
	while(salidaAct != 1){
		salidaAct = (PINC & (1 << PINC0));
	}
	for(i = 0; i<32; i++){
 1ae:	60 32       	cpi	r22, 0x20	; 32
 1b0:	48 f2       	brcs	.-110    	; 0x144 <leer+0x30>
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	20 c0       	rjmp	.+64     	; 0x1f8 <leer+0xe4>
 1b8:	e7 ec       	ldi	r30, 0xC7	; 199
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <leer+0xa8>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <leer+0xae>
 1c2:	00 00       	nop

		salidaAnt = 1;
	}
	for(i = 0; i < 8; i++){
		_delay_us(50);
		checksum |= ((PINC & (1 << PINC0)))<<(7-i);
 1c4:	96 b1       	in	r25, 0x06	; 6
 1c6:	09 2f       	mov	r16, r25
 1c8:	01 70       	andi	r16, 0x01	; 1
 1ca:	10 e0       	ldi	r17, 0x00	; 0
 1cc:	47 e0       	ldi	r20, 0x07	; 7
 1ce:	50 e0       	ldi	r21, 0x00	; 0
 1d0:	43 1b       	sub	r20, r19
 1d2:	51 09       	sbc	r21, r1
 1d4:	d8 01       	movw	r26, r16
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <leer+0xc8>
 1d8:	aa 0f       	add	r26, r26
 1da:	bb 1f       	adc	r27, r27
 1dc:	4a 95       	dec	r20
 1de:	e2 f7       	brpl	.-8      	; 0x1d8 <leer+0xc4>
 1e0:	6a 2b       	or	r22, r26
		while(!(salidaAct == 1 && salidaAnt == 0)){
 1e2:	04 c0       	rjmp	.+8      	; 0x1ec <leer+0xd8>
			salidaAnt = salidaAct;
			salidaAct = (PINC & (1 << PINC0));
 1e4:	96 b1       	in	r25, 0x06	; 6
	}
	for(i = 0; i < 8; i++){
		_delay_us(50);
		checksum |= ((PINC & (1 << PINC0)))<<(7-i);
		while(!(salidaAct == 1 && salidaAnt == 0)){
			salidaAnt = salidaAct;
 1e6:	28 2f       	mov	r18, r24
			salidaAct = (PINC & (1 << PINC0));
 1e8:	89 2f       	mov	r24, r25
 1ea:	81 70       	andi	r24, 0x01	; 1
		salidaAnt = 1;
	}
	for(i = 0; i < 8; i++){
		_delay_us(50);
		checksum |= ((PINC & (1 << PINC0)))<<(7-i);
		while(!(salidaAct == 1 && salidaAnt == 0)){
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	d1 f7       	brne	.-12     	; 0x1e4 <leer+0xd0>
 1f0:	21 11       	cpse	r18, r1
 1f2:	f8 cf       	rjmp	.-16     	; 0x1e4 <leer+0xd0>
			salidaAct = (PINC & (1 << PINC0));
		}

		salidaAnt = 1;
	}
	for(i = 0; i < 8; i++){
 1f4:	3f 5f       	subi	r19, 0xFF	; 255
		checksum |= ((PINC & (1 << PINC0)))<<(7-i);
		while(!(salidaAct == 1 && salidaAnt == 0)){
			salidaAnt = salidaAct;
			salidaAct = (PINC & (1 << PINC0));
		}
		salidaAnt = 1;
 1f6:	28 2f       	mov	r18, r24
			salidaAct = (PINC & (1 << PINC0));
		}

		salidaAnt = 1;
	}
	for(i = 0; i < 8; i++){
 1f8:	38 30       	cpi	r19, 0x08	; 8
 1fa:	f0 f2       	brcs	.-68     	; 0x1b8 <leer+0xa4>
			salidaAnt = salidaAct;
			salidaAct = (PINC & (1 << PINC0));
		}
		salidaAnt = 1;
	}
	aux = (res[0] + res[1] + res[2] + res[3]);
 1fc:	f7 01       	movw	r30, r14
 1fe:	30 81       	ld	r19, Z
 200:	21 81       	ldd	r18, Z+1	; 0x01
 202:	92 81       	ldd	r25, Z+2	; 0x02
 204:	83 81       	ldd	r24, Z+3	; 0x03
 206:	23 0f       	add	r18, r19
 208:	92 0f       	add	r25, r18
 20a:	98 0f       	add	r25, r24
	return (checksum == aux);
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	69 13       	cpse	r22, r25
 210:	80 e0       	ldi	r24, 0x00	; 0
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	1f 91       	pop	r17
 218:	0f 91       	pop	r16
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	08 95       	ret

00000220 <LCDsendChar>:
 220:	65 b1       	in	r22, 0x05	; 5
 222:	98 2f       	mov	r25, r24
 224:	90 74       	andi	r25, 0x40	; 64
 226:	49 2f       	mov	r20, r25
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	55 95       	asr	r21
 22c:	47 95       	ror	r20
 22e:	55 95       	asr	r21
 230:	47 95       	ror	r20
 232:	55 95       	asr	r21
 234:	47 95       	ror	r20
 236:	55 95       	asr	r21
 238:	47 95       	ror	r20
 23a:	98 2f       	mov	r25, r24
 23c:	90 78       	andi	r25, 0x80	; 128
 23e:	29 2f       	mov	r18, r25
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	02 2e       	mov	r0, r18
 244:	23 2f       	mov	r18, r19
 246:	00 0c       	add	r0, r0
 248:	22 1f       	adc	r18, r18
 24a:	33 0b       	sbc	r19, r19
 24c:	00 0c       	add	r0, r0
 24e:	22 1f       	adc	r18, r18
 250:	33 1f       	adc	r19, r19
 252:	96 2f       	mov	r25, r22
 254:	99 7f       	andi	r25, 0xF9	; 249
 256:	49 2b       	or	r20, r25
 258:	24 2b       	or	r18, r20
 25a:	25 b9       	out	0x05, r18	; 5
 25c:	68 b1       	in	r22, 0x08	; 8
 25e:	98 2f       	mov	r25, r24
 260:	90 71       	andi	r25, 0x10	; 16
 262:	49 2f       	mov	r20, r25
 264:	50 e0       	ldi	r21, 0x00	; 0
 266:	55 95       	asr	r21
 268:	47 95       	ror	r20
 26a:	55 95       	asr	r21
 26c:	47 95       	ror	r20
 26e:	55 95       	asr	r21
 270:	47 95       	ror	r20
 272:	98 2f       	mov	r25, r24
 274:	90 72       	andi	r25, 0x20	; 32
 276:	29 2f       	mov	r18, r25
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	35 95       	asr	r19
 27c:	27 95       	ror	r18
 27e:	35 95       	asr	r19
 280:	27 95       	ror	r18
 282:	35 95       	asr	r19
 284:	27 95       	ror	r18
 286:	96 2f       	mov	r25, r22
 288:	99 7f       	andi	r25, 0xF9	; 249
 28a:	49 2b       	or	r20, r25
 28c:	24 2b       	or	r18, r20
 28e:	28 b9       	out	0x08, r18	; 8
 290:	9b b1       	in	r25, 0x0b	; 11
 292:	92 60       	ori	r25, 0x02	; 2
 294:	9b b9       	out	0x0b, r25	; 11
 296:	9b b1       	in	r25, 0x0b	; 11
 298:	91 60       	ori	r25, 0x01	; 1
 29a:	9b b9       	out	0x0b, r25	; 11
 29c:	25 ed       	ldi	r18, 0xD5	; 213
 29e:	2a 95       	dec	r18
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LCDsendChar+0x7e>
 2a2:	00 00       	nop
 2a4:	9b b1       	in	r25, 0x0b	; 11
 2a6:	9e 7f       	andi	r25, 0xFE	; 254
 2a8:	9b b9       	out	0x0b, r25	; 11
 2aa:	9b b1       	in	r25, 0x0b	; 11
 2ac:	9d 7f       	andi	r25, 0xFD	; 253
 2ae:	9b b9       	out	0x0b, r25	; 11
 2b0:	95 ed       	ldi	r25, 0xD5	; 213
 2b2:	9a 95       	dec	r25
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCDsendChar+0x92>
 2b6:	00 00       	nop
 2b8:	65 b1       	in	r22, 0x05	; 5
 2ba:	20 e1       	ldi	r18, 0x10	; 16
 2bc:	82 9f       	mul	r24, r18
 2be:	c0 01       	movw	r24, r0
 2c0:	11 24       	eor	r1, r1
 2c2:	ac 01       	movw	r20, r24
 2c4:	40 74       	andi	r20, 0x40	; 64
 2c6:	55 27       	eor	r21, r21
 2c8:	55 95       	asr	r21
 2ca:	47 95       	ror	r20
 2cc:	55 95       	asr	r21
 2ce:	47 95       	ror	r20
 2d0:	55 95       	asr	r21
 2d2:	47 95       	ror	r20
 2d4:	55 95       	asr	r21
 2d6:	47 95       	ror	r20
 2d8:	9c 01       	movw	r18, r24
 2da:	20 78       	andi	r18, 0x80	; 128
 2dc:	33 27       	eor	r19, r19
 2de:	02 2e       	mov	r0, r18
 2e0:	23 2f       	mov	r18, r19
 2e2:	00 0c       	add	r0, r0
 2e4:	22 1f       	adc	r18, r18
 2e6:	33 0b       	sbc	r19, r19
 2e8:	00 0c       	add	r0, r0
 2ea:	22 1f       	adc	r18, r18
 2ec:	33 1f       	adc	r19, r19
 2ee:	36 2f       	mov	r19, r22
 2f0:	39 7f       	andi	r19, 0xF9	; 249
 2f2:	43 2b       	or	r20, r19
 2f4:	24 2b       	or	r18, r20
 2f6:	25 b9       	out	0x05, r18	; 5
 2f8:	48 b1       	in	r20, 0x08	; 8
 2fa:	9c 01       	movw	r18, r24
 2fc:	20 71       	andi	r18, 0x10	; 16
 2fe:	33 27       	eor	r19, r19
 300:	35 95       	asr	r19
 302:	27 95       	ror	r18
 304:	35 95       	asr	r19
 306:	27 95       	ror	r18
 308:	35 95       	asr	r19
 30a:	27 95       	ror	r18
 30c:	80 72       	andi	r24, 0x20	; 32
 30e:	99 27       	eor	r25, r25
 310:	95 95       	asr	r25
 312:	87 95       	ror	r24
 314:	95 95       	asr	r25
 316:	87 95       	ror	r24
 318:	95 95       	asr	r25
 31a:	87 95       	ror	r24
 31c:	94 2f       	mov	r25, r20
 31e:	99 7f       	andi	r25, 0xF9	; 249
 320:	29 2b       	or	r18, r25
 322:	82 2b       	or	r24, r18
 324:	88 b9       	out	0x08, r24	; 8
 326:	8b b1       	in	r24, 0x0b	; 11
 328:	82 60       	ori	r24, 0x02	; 2
 32a:	8b b9       	out	0x0b, r24	; 11
 32c:	8b b1       	in	r24, 0x0b	; 11
 32e:	81 60       	ori	r24, 0x01	; 1
 330:	8b b9       	out	0x0b, r24	; 11
 332:	85 ed       	ldi	r24, 0xD5	; 213
 334:	8a 95       	dec	r24
 336:	f1 f7       	brne	.-4      	; 0x334 <LCDsendChar+0x114>
 338:	00 00       	nop
 33a:	8b b1       	in	r24, 0x0b	; 11
 33c:	8e 7f       	andi	r24, 0xFE	; 254
 33e:	8b b9       	out	0x0b, r24	; 11
 340:	8b b1       	in	r24, 0x0b	; 11
 342:	8d 7f       	andi	r24, 0xFD	; 253
 344:	8b b9       	out	0x0b, r24	; 11
 346:	95 ed       	ldi	r25, 0xD5	; 213
 348:	9a 95       	dec	r25
 34a:	f1 f7       	brne	.-4      	; 0x348 <LCDsendChar+0x128>
 34c:	00 00       	nop
 34e:	08 95       	ret

00000350 <LCDsendCommand>:
 350:	65 b1       	in	r22, 0x05	; 5
 352:	98 2f       	mov	r25, r24
 354:	90 74       	andi	r25, 0x40	; 64
 356:	49 2f       	mov	r20, r25
 358:	50 e0       	ldi	r21, 0x00	; 0
 35a:	55 95       	asr	r21
 35c:	47 95       	ror	r20
 35e:	55 95       	asr	r21
 360:	47 95       	ror	r20
 362:	55 95       	asr	r21
 364:	47 95       	ror	r20
 366:	55 95       	asr	r21
 368:	47 95       	ror	r20
 36a:	98 2f       	mov	r25, r24
 36c:	90 78       	andi	r25, 0x80	; 128
 36e:	29 2f       	mov	r18, r25
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	02 2e       	mov	r0, r18
 374:	23 2f       	mov	r18, r19
 376:	00 0c       	add	r0, r0
 378:	22 1f       	adc	r18, r18
 37a:	33 0b       	sbc	r19, r19
 37c:	00 0c       	add	r0, r0
 37e:	22 1f       	adc	r18, r18
 380:	33 1f       	adc	r19, r19
 382:	96 2f       	mov	r25, r22
 384:	99 7f       	andi	r25, 0xF9	; 249
 386:	49 2b       	or	r20, r25
 388:	24 2b       	or	r18, r20
 38a:	25 b9       	out	0x05, r18	; 5
 38c:	68 b1       	in	r22, 0x08	; 8
 38e:	98 2f       	mov	r25, r24
 390:	90 71       	andi	r25, 0x10	; 16
 392:	49 2f       	mov	r20, r25
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	55 95       	asr	r21
 398:	47 95       	ror	r20
 39a:	55 95       	asr	r21
 39c:	47 95       	ror	r20
 39e:	55 95       	asr	r21
 3a0:	47 95       	ror	r20
 3a2:	98 2f       	mov	r25, r24
 3a4:	90 72       	andi	r25, 0x20	; 32
 3a6:	29 2f       	mov	r18, r25
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	35 95       	asr	r19
 3ac:	27 95       	ror	r18
 3ae:	35 95       	asr	r19
 3b0:	27 95       	ror	r18
 3b2:	35 95       	asr	r19
 3b4:	27 95       	ror	r18
 3b6:	96 2f       	mov	r25, r22
 3b8:	99 7f       	andi	r25, 0xF9	; 249
 3ba:	49 2b       	or	r20, r25
 3bc:	24 2b       	or	r18, r20
 3be:	28 b9       	out	0x08, r18	; 8
 3c0:	9b b1       	in	r25, 0x0b	; 11
 3c2:	91 60       	ori	r25, 0x01	; 1
 3c4:	9b b9       	out	0x0b, r25	; 11
 3c6:	ef e9       	ldi	r30, 0x9F	; 159
 3c8:	ff e0       	ldi	r31, 0x0F	; 15
 3ca:	31 97       	sbiw	r30, 0x01	; 1
 3cc:	f1 f7       	brne	.-4      	; 0x3ca <LCDsendCommand+0x7a>
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <LCDsendCommand+0x80>
 3d0:	00 00       	nop
 3d2:	9b b1       	in	r25, 0x0b	; 11
 3d4:	9e 7f       	andi	r25, 0xFE	; 254
 3d6:	9b b9       	out	0x0b, r25	; 11
 3d8:	ef e9       	ldi	r30, 0x9F	; 159
 3da:	ff e0       	ldi	r31, 0x0F	; 15
 3dc:	31 97       	sbiw	r30, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <LCDsendCommand+0x8c>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <LCDsendCommand+0x92>
 3e2:	00 00       	nop
 3e4:	65 b1       	in	r22, 0x05	; 5
 3e6:	f0 e1       	ldi	r31, 0x10	; 16
 3e8:	8f 9f       	mul	r24, r31
 3ea:	c0 01       	movw	r24, r0
 3ec:	11 24       	eor	r1, r1
 3ee:	ac 01       	movw	r20, r24
 3f0:	40 74       	andi	r20, 0x40	; 64
 3f2:	55 27       	eor	r21, r21
 3f4:	55 95       	asr	r21
 3f6:	47 95       	ror	r20
 3f8:	55 95       	asr	r21
 3fa:	47 95       	ror	r20
 3fc:	55 95       	asr	r21
 3fe:	47 95       	ror	r20
 400:	55 95       	asr	r21
 402:	47 95       	ror	r20
 404:	9c 01       	movw	r18, r24
 406:	20 78       	andi	r18, 0x80	; 128
 408:	33 27       	eor	r19, r19
 40a:	02 2e       	mov	r0, r18
 40c:	23 2f       	mov	r18, r19
 40e:	00 0c       	add	r0, r0
 410:	22 1f       	adc	r18, r18
 412:	33 0b       	sbc	r19, r19
 414:	00 0c       	add	r0, r0
 416:	22 1f       	adc	r18, r18
 418:	33 1f       	adc	r19, r19
 41a:	36 2f       	mov	r19, r22
 41c:	39 7f       	andi	r19, 0xF9	; 249
 41e:	43 2b       	or	r20, r19
 420:	24 2b       	or	r18, r20
 422:	25 b9       	out	0x05, r18	; 5
 424:	48 b1       	in	r20, 0x08	; 8
 426:	9c 01       	movw	r18, r24
 428:	20 71       	andi	r18, 0x10	; 16
 42a:	33 27       	eor	r19, r19
 42c:	35 95       	asr	r19
 42e:	27 95       	ror	r18
 430:	35 95       	asr	r19
 432:	27 95       	ror	r18
 434:	35 95       	asr	r19
 436:	27 95       	ror	r18
 438:	80 72       	andi	r24, 0x20	; 32
 43a:	99 27       	eor	r25, r25
 43c:	95 95       	asr	r25
 43e:	87 95       	ror	r24
 440:	95 95       	asr	r25
 442:	87 95       	ror	r24
 444:	95 95       	asr	r25
 446:	87 95       	ror	r24
 448:	94 2f       	mov	r25, r20
 44a:	99 7f       	andi	r25, 0xF9	; 249
 44c:	29 2b       	or	r18, r25
 44e:	82 2b       	or	r24, r18
 450:	88 b9       	out	0x08, r24	; 8
 452:	8b b1       	in	r24, 0x0b	; 11
 454:	81 60       	ori	r24, 0x01	; 1
 456:	8b b9       	out	0x0b, r24	; 11
 458:	8f e9       	ldi	r24, 0x9F	; 159
 45a:	9f e0       	ldi	r25, 0x0F	; 15
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	f1 f7       	brne	.-4      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 462:	00 00       	nop
 464:	8b b1       	in	r24, 0x0b	; 11
 466:	8e 7f       	andi	r24, 0xFE	; 254
 468:	8b b9       	out	0x0b, r24	; 11
 46a:	ef e9       	ldi	r30, 0x9F	; 159
 46c:	ff e0       	ldi	r31, 0x0F	; 15
 46e:	31 97       	sbiw	r30, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 472:	00 c0       	rjmp	.+0      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 474:	00 00       	nop
 476:	08 95       	ret

00000478 <LCDclr>:
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	0e 94 a8 01 	call	0x350	; 0x350 <LCDsendCommand>
 47e:	08 95       	ret

00000480 <LCDhome>:
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	0e 94 a8 01 	call	0x350	; 0x350 <LCDsendCommand>
 486:	08 95       	ret

00000488 <LCDGotoXY>:
 488:	62 30       	cpi	r22, 0x02	; 2
 48a:	31 f0       	breq	.+12     	; 0x498 <LCDGotoXY+0x10>
 48c:	63 30       	cpi	r22, 0x03	; 3
 48e:	31 f0       	breq	.+12     	; 0x49c <LCDGotoXY+0x14>
 490:	61 30       	cpi	r22, 0x01	; 1
 492:	29 f4       	brne	.+10     	; 0x49e <LCDGotoXY+0x16>
 494:	80 5c       	subi	r24, 0xC0	; 192
 496:	03 c0       	rjmp	.+6      	; 0x49e <LCDGotoXY+0x16>
 498:	8c 5e       	subi	r24, 0xEC	; 236
 49a:	01 c0       	rjmp	.+2      	; 0x49e <LCDGotoXY+0x16>
 49c:	8c 5a       	subi	r24, 0xAC	; 172
 49e:	80 68       	ori	r24, 0x80	; 128
 4a0:	0e 94 a8 01 	call	0x350	; 0x350 <LCDsendCommand>
 4a4:	08 95       	ret

000004a6 <LCDdefinechar>:
 4a6:	ef 92       	push	r14
 4a8:	ff 92       	push	r15
 4aa:	0f 93       	push	r16
 4ac:	1f 93       	push	r17
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	7c 01       	movw	r14, r24
 4b4:	86 2f       	mov	r24, r22
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	88 0f       	add	r24, r24
 4c2:	99 1f       	adc	r25, r25
 4c4:	80 64       	ori	r24, 0x40	; 64
 4c6:	c0 e0       	ldi	r28, 0x00	; 0
 4c8:	d0 e0       	ldi	r29, 0x00	; 0
 4ca:	0d c0       	rjmp	.+26     	; 0x4e6 <LCDdefinechar+0x40>
 4cc:	f7 01       	movw	r30, r14
 4ce:	ec 0f       	add	r30, r28
 4d0:	fd 1f       	adc	r31, r29
 4d2:	14 91       	lpm	r17, Z
 4d4:	01 e0       	ldi	r16, 0x01	; 1
 4d6:	08 0f       	add	r16, r24
 4d8:	0e 94 a8 01 	call	0x350	; 0x350 <LCDsendCommand>
 4dc:	81 2f       	mov	r24, r17
 4de:	0e 94 10 01 	call	0x220	; 0x220 <LCDsendChar>
 4e2:	21 96       	adiw	r28, 0x01	; 1
 4e4:	80 2f       	mov	r24, r16
 4e6:	c8 30       	cpi	r28, 0x08	; 8
 4e8:	d1 05       	cpc	r29, r1
 4ea:	80 f3       	brcs	.-32     	; 0x4cc <LCDdefinechar+0x26>
 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	ff 90       	pop	r15
 4f6:	ef 90       	pop	r14
 4f8:	08 95       	ret

000004fa <LCDinit>:
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	8f e5       	ldi	r24, 0x5F	; 95
 500:	9a ee       	ldi	r25, 0xEA	; 234
 502:	01 97       	sbiw	r24, 0x01	; 1
 504:	f1 f7       	brne	.-4      	; 0x502 <LCDinit+0x8>
 506:	00 c0       	rjmp	.+0      	; 0x508 <LCDinit+0xe>
 508:	00 00       	nop
 50a:	85 b1       	in	r24, 0x05	; 5
 50c:	89 7f       	andi	r24, 0xF9	; 249
 50e:	85 b9       	out	0x05, r24	; 5
 510:	88 b1       	in	r24, 0x08	; 8
 512:	89 7f       	andi	r24, 0xF9	; 249
 514:	88 b9       	out	0x08, r24	; 8
 516:	1b b8       	out	0x0b, r1	; 11
 518:	87 b1       	in	r24, 0x07	; 7
 51a:	86 60       	ori	r24, 0x06	; 6
 51c:	87 b9       	out	0x07, r24	; 7
 51e:	84 b1       	in	r24, 0x04	; 4
 520:	86 60       	ori	r24, 0x06	; 6
 522:	84 b9       	out	0x04, r24	; 4
 524:	84 b1       	in	r24, 0x04	; 4
 526:	86 60       	ori	r24, 0x06	; 6
 528:	84 b9       	out	0x04, r24	; 4
 52a:	87 b1       	in	r24, 0x07	; 7
 52c:	86 60       	ori	r24, 0x06	; 6
 52e:	87 b9       	out	0x07, r24	; 7
 530:	8a b1       	in	r24, 0x0a	; 10
 532:	83 60       	ori	r24, 0x03	; 3
 534:	8a b9       	out	0x0a, r24	; 10
 536:	85 b1       	in	r24, 0x05	; 5
 538:	89 7f       	andi	r24, 0xF9	; 249
 53a:	85 b9       	out	0x05, r24	; 5
 53c:	88 b1       	in	r24, 0x08	; 8
 53e:	86 60       	ori	r24, 0x06	; 6
 540:	88 b9       	out	0x08, r24	; 8
 542:	8b b1       	in	r24, 0x0b	; 11
 544:	81 60       	ori	r24, 0x01	; 1
 546:	8b b9       	out	0x0b, r24	; 11
 548:	8f e9       	ldi	r24, 0x9F	; 159
 54a:	9f e0       	ldi	r25, 0x0F	; 15
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	f1 f7       	brne	.-4      	; 0x54c <LCDinit+0x52>
 550:	00 c0       	rjmp	.+0      	; 0x552 <LCDinit+0x58>
 552:	00 00       	nop
 554:	8b b1       	in	r24, 0x0b	; 11
 556:	8e 7f       	andi	r24, 0xFE	; 254
 558:	8b b9       	out	0x0b, r24	; 11
 55a:	8f e9       	ldi	r24, 0x9F	; 159
 55c:	9f e0       	ldi	r25, 0x0F	; 15
 55e:	01 97       	sbiw	r24, 0x01	; 1
 560:	f1 f7       	brne	.-4      	; 0x55e <LCDinit+0x64>
 562:	00 c0       	rjmp	.+0      	; 0x564 <LCDinit+0x6a>
 564:	00 00       	nop
 566:	85 b1       	in	r24, 0x05	; 5
 568:	89 7f       	andi	r24, 0xF9	; 249
 56a:	85 b9       	out	0x05, r24	; 5
 56c:	88 b1       	in	r24, 0x08	; 8
 56e:	86 60       	ori	r24, 0x06	; 6
 570:	88 b9       	out	0x08, r24	; 8
 572:	8b b1       	in	r24, 0x0b	; 11
 574:	81 60       	ori	r24, 0x01	; 1
 576:	8b b9       	out	0x0b, r24	; 11
 578:	8f e9       	ldi	r24, 0x9F	; 159
 57a:	9f e0       	ldi	r25, 0x0F	; 15
 57c:	01 97       	sbiw	r24, 0x01	; 1
 57e:	f1 f7       	brne	.-4      	; 0x57c <LCDinit+0x82>
 580:	00 c0       	rjmp	.+0      	; 0x582 <LCDinit+0x88>
 582:	00 00       	nop
 584:	8b b1       	in	r24, 0x0b	; 11
 586:	8e 7f       	andi	r24, 0xFE	; 254
 588:	8b b9       	out	0x0b, r24	; 11
 58a:	8f e9       	ldi	r24, 0x9F	; 159
 58c:	9f e0       	ldi	r25, 0x0F	; 15
 58e:	01 97       	sbiw	r24, 0x01	; 1
 590:	f1 f7       	brne	.-4      	; 0x58e <LCDinit+0x94>
 592:	00 c0       	rjmp	.+0      	; 0x594 <LCDinit+0x9a>
 594:	00 00       	nop
 596:	85 b1       	in	r24, 0x05	; 5
 598:	89 7f       	andi	r24, 0xF9	; 249
 59a:	85 b9       	out	0x05, r24	; 5
 59c:	88 b1       	in	r24, 0x08	; 8
 59e:	89 7f       	andi	r24, 0xF9	; 249
 5a0:	84 60       	ori	r24, 0x04	; 4
 5a2:	88 b9       	out	0x08, r24	; 8
 5a4:	8b b1       	in	r24, 0x0b	; 11
 5a6:	81 60       	ori	r24, 0x01	; 1
 5a8:	8b b9       	out	0x0b, r24	; 11
 5aa:	8f e9       	ldi	r24, 0x9F	; 159
 5ac:	9f e0       	ldi	r25, 0x0F	; 15
 5ae:	01 97       	sbiw	r24, 0x01	; 1
 5b0:	f1 f7       	brne	.-4      	; 0x5ae <LCDinit+0xb4>
 5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <LCDinit+0xba>
 5b4:	00 00       	nop
 5b6:	8b b1       	in	r24, 0x0b	; 11
 5b8:	8e 7f       	andi	r24, 0xFE	; 254
 5ba:	8b b9       	out	0x0b, r24	; 11
 5bc:	8f e9       	ldi	r24, 0x9F	; 159
 5be:	9f e0       	ldi	r25, 0x0F	; 15
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <LCDinit+0xc6>
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <LCDinit+0xcc>
 5c6:	00 00       	nop
 5c8:	88 e2       	ldi	r24, 0x28	; 40
 5ca:	0e 94 a8 01 	call	0x350	; 0x350 <LCDsendCommand>
 5ce:	8c e0       	ldi	r24, 0x0C	; 12
 5d0:	0e 94 a8 01 	call	0x350	; 0x350 <LCDsendCommand>
 5d4:	60 e0       	ldi	r22, 0x00	; 0
 5d6:	c0 e0       	ldi	r28, 0x00	; 0
 5d8:	0a c0       	rjmp	.+20     	; 0x5ee <LCDinit+0xf4>
 5da:	d1 e0       	ldi	r29, 0x01	; 1
 5dc:	d6 0f       	add	r29, r22
 5de:	8c 2f       	mov	r24, r28
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	88 59       	subi	r24, 0x98	; 152
 5e4:	9f 4f       	sbci	r25, 0xFF	; 255
 5e6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <LCDdefinechar>
 5ea:	c8 5f       	subi	r28, 0xF8	; 248
 5ec:	6d 2f       	mov	r22, r29
 5ee:	c0 34       	cpi	r28, 0x40	; 64
 5f0:	a0 f3       	brcs	.-24     	; 0x5da <LCDinit+0xe0>
 5f2:	df 91       	pop	r29
 5f4:	cf 91       	pop	r28
 5f6:	08 95       	ret

000005f8 <LCDescribeDato>:
 5f8:	ef 92       	push	r14
 5fa:	ff 92       	push	r15
 5fc:	0f 93       	push	r16
 5fe:	1f 93       	push	r17
 600:	cf 93       	push	r28
 602:	df 93       	push	r29
 604:	00 d0       	rcall	.+0      	; 0x606 <LCDescribeDato+0xe>
 606:	00 d0       	rcall	.+0      	; 0x608 <LCDescribeDato+0x10>
 608:	1f 92       	push	r1
 60a:	cd b7       	in	r28, 0x3d	; 61
 60c:	de b7       	in	r29, 0x3e	; 62
 60e:	7b 01       	movw	r14, r22
 610:	fe 01       	movw	r30, r28
 612:	31 96       	adiw	r30, 0x01	; 1
 614:	25 e0       	ldi	r18, 0x05	; 5
 616:	df 01       	movw	r26, r30
 618:	1d 92       	st	X+, r1
 61a:	2a 95       	dec	r18
 61c:	e9 f7       	brne	.-6      	; 0x618 <LCDescribeDato+0x20>
 61e:	24 e0       	ldi	r18, 0x04	; 4
 620:	30 e0       	ldi	r19, 0x00	; 0
 622:	0f c0       	rjmp	.+30     	; 0x642 <LCDescribeDato+0x4a>
 624:	6a e0       	ldi	r22, 0x0A	; 10
 626:	70 e0       	ldi	r23, 0x00	; 0
 628:	0e 94 99 03 	call	0x732	; 0x732 <__divmodhi4>
 62c:	e1 e0       	ldi	r30, 0x01	; 1
 62e:	f0 e0       	ldi	r31, 0x00	; 0
 630:	ec 0f       	add	r30, r28
 632:	fd 1f       	adc	r31, r29
 634:	e2 0f       	add	r30, r18
 636:	f3 1f       	adc	r31, r19
 638:	80 83       	st	Z, r24
 63a:	86 2f       	mov	r24, r22
 63c:	97 2f       	mov	r25, r23
 63e:	21 50       	subi	r18, 0x01	; 1
 640:	31 09       	sbc	r19, r1
 642:	00 97       	sbiw	r24, 0x00	; 0
 644:	79 f7       	brne	.-34     	; 0x624 <LCDescribeDato+0x2c>
 646:	bf ef       	ldi	r27, 0xFF	; 255
 648:	eb 16       	cp	r14, r27
 64a:	fb 06       	cpc	r15, r27
 64c:	81 f4       	brne	.+32     	; 0x66e <LCDescribeDato+0x76>
 64e:	03 c0       	rjmp	.+6      	; 0x656 <LCDescribeDato+0x5e>
 650:	0f 5f       	subi	r16, 0xFF	; 255
 652:	1f 4f       	sbci	r17, 0xFF	; 255
 654:	02 c0       	rjmp	.+4      	; 0x65a <LCDescribeDato+0x62>
 656:	00 e0       	ldi	r16, 0x00	; 0
 658:	10 e0       	ldi	r17, 0x00	; 0
 65a:	e1 e0       	ldi	r30, 0x01	; 1
 65c:	f0 e0       	ldi	r31, 0x00	; 0
 65e:	ec 0f       	add	r30, r28
 660:	fd 1f       	adc	r31, r29
 662:	e0 0f       	add	r30, r16
 664:	f1 1f       	adc	r31, r17
 666:	20 81       	ld	r18, Z
 668:	22 23       	and	r18, r18
 66a:	91 f3       	breq	.-28     	; 0x650 <LCDescribeDato+0x58>
 66c:	04 c0       	rjmp	.+8      	; 0x676 <LCDescribeDato+0x7e>
 66e:	05 e0       	ldi	r16, 0x05	; 5
 670:	10 e0       	ldi	r17, 0x00	; 0
 672:	0e 19       	sub	r16, r14
 674:	1f 09       	sbc	r17, r15
 676:	99 23       	and	r25, r25
 678:	84 f4       	brge	.+32     	; 0x69a <LCDescribeDato+0xa2>
 67a:	8d e2       	ldi	r24, 0x2D	; 45
 67c:	0e 94 10 01 	call	0x220	; 0x220 <LCDsendChar>
 680:	0c c0       	rjmp	.+24     	; 0x69a <LCDescribeDato+0xa2>
 682:	e1 e0       	ldi	r30, 0x01	; 1
 684:	f0 e0       	ldi	r31, 0x00	; 0
 686:	ec 0f       	add	r30, r28
 688:	fd 1f       	adc	r31, r29
 68a:	e0 0f       	add	r30, r16
 68c:	f1 1f       	adc	r31, r17
 68e:	80 81       	ld	r24, Z
 690:	80 5d       	subi	r24, 0xD0	; 208
 692:	0e 94 10 01 	call	0x220	; 0x220 <LCDsendChar>
 696:	0f 5f       	subi	r16, 0xFF	; 255
 698:	1f 4f       	sbci	r17, 0xFF	; 255
 69a:	05 30       	cpi	r16, 0x05	; 5
 69c:	11 05       	cpc	r17, r1
 69e:	8c f3       	brlt	.-30     	; 0x682 <LCDescribeDato+0x8a>
 6a0:	0f 90       	pop	r0
 6a2:	0f 90       	pop	r0
 6a4:	0f 90       	pop	r0
 6a6:	0f 90       	pop	r0
 6a8:	0f 90       	pop	r0
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	1f 91       	pop	r17
 6b0:	0f 91       	pop	r16
 6b2:	ff 90       	pop	r15
 6b4:	ef 90       	pop	r14
 6b6:	08 95       	ret

000006b8 <main>:
#include "dht11.h"
#include "lcd.h"


int main(void)
{
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29
 6bc:	00 d0       	rcall	.+0      	; 0x6be <main+0x6>
 6be:	00 d0       	rcall	.+0      	; 0x6c0 <main+0x8>
 6c0:	cd b7       	in	r28, 0x3d	; 61
 6c2:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	
	LCDinit();
 6c4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <LCDinit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6c8:	2f ef       	ldi	r18, 0xFF	; 255
 6ca:	81 ee       	ldi	r24, 0xE1	; 225
 6cc:	94 e0       	ldi	r25, 0x04	; 4
 6ce:	21 50       	subi	r18, 0x01	; 1
 6d0:	80 40       	sbci	r24, 0x00	; 0
 6d2:	90 40       	sbci	r25, 0x00	; 0
 6d4:	e1 f7       	brne	.-8      	; 0x6ce <main+0x16>
 6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <main+0x20>
 6d8:	00 00       	nop
	_delay_ms(100);
	LCDhome();
 6da:	0e 94 40 02 	call	0x480	; 0x480 <LCDhome>
    
	uint8_t h_t[4]={0,0,0,0};
 6de:	19 82       	std	Y+1, r1	; 0x01
 6e0:	1a 82       	std	Y+2, r1	; 0x02
 6e2:	1b 82       	std	Y+3, r1	; 0x03
 6e4:	1c 82       	std	Y+4, r1	; 0x04
	uint8_t flagCheck=0;
	while (1) 
    {
		flagCheck=leer(h_t);
 6e6:	ce 01       	movw	r24, r28
 6e8:	01 96       	adiw	r24, 0x01	; 1
 6ea:	0e 94 8a 00 	call	0x114	; 0x114 <leer>
		if(flagCheck){
 6ee:	88 23       	and	r24, r24
 6f0:	b1 f0       	breq	.+44     	; 0x71e <main+0x66>
			LCDclr();
 6f2:	0e 94 3c 02 	call	0x478	; 0x478 <LCDclr>
			LCDGotoXY(0,0);
 6f6:	60 e0       	ldi	r22, 0x00	; 0
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	0e 94 44 02 	call	0x488	; 0x488 <LCDGotoXY>
			LCDescribeDato(h_t[0],2);
 6fe:	89 81       	ldd	r24, Y+1	; 0x01
 700:	62 e0       	ldi	r22, 0x02	; 2
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <LCDescribeDato>
			LCDGotoXY(0,1);
 70a:	61 e0       	ldi	r22, 0x01	; 1
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	0e 94 44 02 	call	0x488	; 0x488 <LCDGotoXY>
			LCDescribeDato(h_t[2],2);
 712:	8b 81       	ldd	r24, Y+3	; 0x03
 714:	62 e0       	ldi	r22, 0x02	; 2
 716:	70 e0       	ldi	r23, 0x00	; 0
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <LCDescribeDato>
 71e:	2f ef       	ldi	r18, 0xFF	; 255
 720:	87 ea       	ldi	r24, 0xA7	; 167
 722:	91 e6       	ldi	r25, 0x61	; 97
 724:	21 50       	subi	r18, 0x01	; 1
 726:	80 40       	sbci	r24, 0x00	; 0
 728:	90 40       	sbci	r25, 0x00	; 0
 72a:	e1 f7       	brne	.-8      	; 0x724 <main+0x6c>
 72c:	00 c0       	rjmp	.+0      	; 0x72e <main+0x76>
 72e:	00 00       	nop
 730:	da cf       	rjmp	.-76     	; 0x6e6 <main+0x2e>

00000732 <__divmodhi4>:
 732:	97 fb       	bst	r25, 7
 734:	07 2e       	mov	r0, r23
 736:	16 f4       	brtc	.+4      	; 0x73c <__divmodhi4+0xa>
 738:	00 94       	com	r0
 73a:	07 d0       	rcall	.+14     	; 0x74a <__divmodhi4_neg1>
 73c:	77 fd       	sbrc	r23, 7
 73e:	09 d0       	rcall	.+18     	; 0x752 <__divmodhi4_neg2>
 740:	0e 94 ad 03 	call	0x75a	; 0x75a <__udivmodhi4>
 744:	07 fc       	sbrc	r0, 7
 746:	05 d0       	rcall	.+10     	; 0x752 <__divmodhi4_neg2>
 748:	3e f4       	brtc	.+14     	; 0x758 <__divmodhi4_exit>

0000074a <__divmodhi4_neg1>:
 74a:	90 95       	com	r25
 74c:	81 95       	neg	r24
 74e:	9f 4f       	sbci	r25, 0xFF	; 255
 750:	08 95       	ret

00000752 <__divmodhi4_neg2>:
 752:	70 95       	com	r23
 754:	61 95       	neg	r22
 756:	7f 4f       	sbci	r23, 0xFF	; 255

00000758 <__divmodhi4_exit>:
 758:	08 95       	ret

0000075a <__udivmodhi4>:
 75a:	aa 1b       	sub	r26, r26
 75c:	bb 1b       	sub	r27, r27
 75e:	51 e1       	ldi	r21, 0x11	; 17
 760:	07 c0       	rjmp	.+14     	; 0x770 <__udivmodhi4_ep>

00000762 <__udivmodhi4_loop>:
 762:	aa 1f       	adc	r26, r26
 764:	bb 1f       	adc	r27, r27
 766:	a6 17       	cp	r26, r22
 768:	b7 07       	cpc	r27, r23
 76a:	10 f0       	brcs	.+4      	; 0x770 <__udivmodhi4_ep>
 76c:	a6 1b       	sub	r26, r22
 76e:	b7 0b       	sbc	r27, r23

00000770 <__udivmodhi4_ep>:
 770:	88 1f       	adc	r24, r24
 772:	99 1f       	adc	r25, r25
 774:	5a 95       	dec	r21
 776:	a9 f7       	brne	.-22     	; 0x762 <__udivmodhi4_loop>
 778:	80 95       	com	r24
 77a:	90 95       	com	r25
 77c:	bc 01       	movw	r22, r24
 77e:	cd 01       	movw	r24, r26
 780:	08 95       	ret

00000782 <_exit>:
 782:	f8 94       	cli

00000784 <__stop_program>:
 784:	ff cf       	rjmp	.-2      	; 0x784 <__stop_program>
